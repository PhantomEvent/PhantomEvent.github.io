[{"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "token==address(0)", "decimal=18", "decimal>0", "taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender]", "tax=_payTax(token,amount,decimal)", "amount=amount.sub(tax)", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "token==address(0)", "decimal=18", "decimal>0", "not(taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender])", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "token==dai", "token=edai", "decimal>0", "taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender]", "tax=_payTax(token,amount,decimal)", "amount=amount.sub(tax)", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "token==dai", "token=edai", "decimal>0", "not(taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender])", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "not(token==dai)", "wrappedDeposit[token]!=address(0)", "token=wrappedDeposit[token]", "decimal>0", "taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender]", "tax=_payTax(token,amount,decimal)", "amount=amount.sub(tax)", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "not(token==dai)", "wrappedDeposit[token]!=address(0)", "token=wrappedDeposit[token]", "decimal>0", "not(taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender])", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "not(token==dai)", "not(wrappedDeposit[token]!=address(0))", "decimal>0", "taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender]", "tax=_payTax(token,amount,decimal)", "amount=amount.sub(tax)", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"amount": "uint256", "dai": "address", "data": "bytes", "decimal": "uint8", "depositCount": "uint256", "edai": "address", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "nonTaxable": "mapping(address => bool)", "silentTokenList": "mapping(address => bool)", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "unwrappedWithdraw": "mapping(address => address)", "wrappedDeposit": "mapping(address => address)"}, "info": ["EthVaultImpl", "_depositToken", "Deposit", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "decimal--variables", "amount--variables", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "amount!=0", "!silentTokenList[token]&&unwrappedWithdraw[token]==address(0)", "not(token==address(0))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "decimal=IERC20(token).decimals()", "not(token==dai)", "not(wrappedDeposit[token]!=address(0))", "decimal>0", "not(taxRate>0&&taxReceiver!=address(0)&&!nonTaxable[msg.sender])", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"data": "bytes", "depositCount": "uint256", "isValidChain": "mapping(bytes32 => bool)", "msg.sender": "address", "silentTokenList": "mapping(address => bool)", "this": "address", "toAddr": "bytes", "toChain": "string", "token": "address", "tokenId": "uint256"}, "info": ["EthVaultImpl", "_depositNFT", "DepositNFT", ["toChain--variables", "msg.sender--variables", "toAddr--variables", "token--variables", "tokenId--variables", "1--uint256", "depositCount--variables", "data--variables"]], "related_expression": ["isValidChain[getChainId(toChain)]", "token!=address(0)", "IERC721(token).ownerOf(tokenId)==msg.sender", "!silentTokenList[token]", "IERC721(token).transferFrom(msg.sender,address(this),tokenId)", "IERC721(token).ownerOf(tokenId)==address(this)", "depositCount=depositCount+1"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "Withdraw", ["fromChain--variables", "fromAddr--variables", "TMP_298--variables", "TMP_299--variables", "bytes32s--variables", "uints--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "BridgeReceiverResult", ["result--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "token==edai", "token=dai", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "CallExpression", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "BridgeReceiverResult", ["result--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "not(token==edai)", "unwrappedWithdraw[token]!=address(0)", "token=unwrappedWithdraw[token]", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "BridgeReceiverResult", ["result--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "not(token==edai)", "not(unwrappedWithdraw[token]!=address(0))", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "OnBridgeReceived", ["result--variables", "returndata--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "token==edai", "token=dai", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)", "BridgeReceiverResult(result,fromAddr,token,data)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "CallExpression", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "OnBridgeReceived", ["result--variables", "returndata--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "not(token==edai)", "unwrappedWithdraw[token]!=address(0)", "token=unwrappedWithdraw[token]", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)", "BridgeReceiverResult(result,fromAddr,token,data)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "dai": "address", "data": "bytes", "edai": "address", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "unwrappedWithdraw": "mapping(address => address)", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdraw", "OnBridgeReceived", ["result--variables", "returndata--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "uints[1]<=100", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "Withdraw(fromChain,fromAddr,abi.encodePacked(toAddr),abi.encodePacked(token),bytes32s,uints,data)", "not(token==edai)", "not(unwrappedWithdraw[token]!=address(0))", "_transferToken(token,toAddr,uints[0])", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(true,gasLimitForBridgeReceiver,token,uints[0],data,toAddr)", "BridgeReceiverResult(result,fromAddr,token,data)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "CallExpression", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "data": "bytes", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdrawNFT", "BridgeReceiverResult", ["result--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(NFT,hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "IERC721(token).ownerOf(uints[1])==address(this)", "IERC721(token).transferFrom(address(this),toAddr,uints[1])", "IERC721(token).ownerOf(uints[1])==toAddr", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(false,gasLimitForBridgeReceiver,token,uints[1],data,toAddr)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "data": "bytes", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdrawNFT", "OnBridgeReceived", ["result--variables", "returndata--variables", "fromAddr--variables", "token--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(NFT,hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "IERC721(token).ownerOf(uints[1])==address(this)", "IERC721(token).transferFrom(address(this),toAddr,uints[1])", "IERC721(token).ownerOf(uints[1])==toAddr", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(false,gasLimitForBridgeReceiver,token,uints[1],data,toAddr)", "BridgeReceiverResult(result,fromAddr,token,data)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "data": "bytes", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdrawNFT", "WithdrawNFT", ["fromChain--variables", "fromAddr--variables", "TMP_350--variables", "TMP_351--variables", "bytes32s--variables", "uints--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(NFT,hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "IERC721(token).ownerOf(uints[1])==address(this)", "IERC721(token).transferFrom(address(this),toAddr,uints[1])", "IERC721(token).ownerOf(uints[1])==toAddr", "isContract(toAddr)&&data.length!=0", "(result,returndata)=LibCallBridgeReceiver.callReceiver(false,gasLimitForBridgeReceiver,token,uints[1],data,toAddr)", "BridgeReceiverResult(result,fromAddr,token,data)", "OnBridgeReceived(result,returndata,fromAddr,token,data)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyActivated"], "vars": {"bytes32s": "bytes32[]", "chain": "string", "chainAddressLength": "mapping(bytes32 => uint256)", "chainUintsLength": "mapping(bytes32 => uint256)", "data": "bytes", "fromAddr": "bytes", "fromChain": "string", "gasLimitForBridgeReceiver": "uint256", "hubContract": "address", "isUsedWithdrawal": "mapping(bytes32 => bool)", "isValidChain": "mapping(bytes32 => bool)", "r": "bytes32[]", "required": "uint256", "result": "bool", "returndata": "bytes", "s": "bytes32[]", "this": "address", "toAddr": "address", "token": "address", "uints": "uint256[]", "v": "uint8[]", "validatorCount": "uint256", "whash": "bytes32"}, "info": ["EthVaultImpl", "withdrawNFT", "WithdrawNFT", ["fromChain--variables", "fromAddr--variables", "TMP_350--variables", "TMP_351--variables", "bytes32s--variables", "uints--variables", "data--variables"]], "related_expression": ["bytes32s.length==2", "uints.length==chainUintsLength[getChainId(fromChain)]", "fromAddr.length==chainAddressLength[getChainId(fromChain)]", "bytes32s[0]==sha256(bytes)(abi.encodePacked(hubContract,chain,address(this)))", "isValidChain[getChainId(fromChain)]", "whash=sha256(bytes)(abi.encodePacked(NFT,hubContract,fromChain,chain,fromAddr,toAddr,token,bytes32s,uints,data))", "!isUsedWithdrawal[whash]", "validatorCount>=required", "IERC721(token).ownerOf(uints[1])==address(this)", "IERC721(token).transferFrom(address(this),toAddr,uints[1])", "IERC721(token).ownerOf(uints[1])==toAddr", "not(isContract(toAddr)&&data.length!=0)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"amount": "uint256", "decimal": "uint8", "depositCount": "uint256", "msg.sender": "address", "tax": "uint256", "taxRate": "uint256", "taxReceiver": "address", "token": "address"}, "info": ["EthVaultImpl", "_payTax", "Deposit", ["ORBIT--string", "msg.sender--variables", "TMP_367--variables", "token--variables", "decimal--variables", "tax--variables", "depositCount--variables", "--string"]], "related_expression": ["tax=amount.mul(taxRate).div(10000)", "tax>0", "depositCount=depositCount+1"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}]