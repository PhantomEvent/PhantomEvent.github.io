[{"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Ownable", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Lib_AddressManager", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_address": "address", "_name": "string", "addresses": "mapping(bytes32 => address)", "nameHash": "bytes32", "oldAddress": "address"}, "info": ["Lib_AddressManager", "setAddress", "AddressSet", ["_name--variables", "_address--variables", "oldAddress--variables"]], "related_expression": ["nameHash=_getNameHash(_name)", "oldAddress=addresses[nameHash]", "addresses[nameHash]=_address"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"SEQUENCER_PUBLISH_WINDOW": "uint256", "_batch": "bytes32[]", "_chainId": "uint256", "_extraData": "bytes", "batchHeader": "Lib_OVMCodec.ChainBatchHeader", "block.timestamp": "uint256", "lastSequencerTimestamp": "uint40", "msg.sender": "address", "proposer": "address", "totalElements": "uint40"}, "info": ["StateCommitmentChain", "_appendBatchByChainId", "StateBatchAppended", ["_chainId--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables"]], "related_expression": ["(totalElements,lastSequencerTimestamp)=_getBatchExtraDataByChainId(_chainId)", "msg.sender==proposer", "lastSequencerTimestamp=uint40(block.timestamp)", "batchHeader=Lib_OVMCodec.ChainBatchHeader({batchIndex:getTotalBatchesByChainId(_chainId),batchRoot:Lib_MerkleTree.getMerkleRoot(_batch),batchSize:_batch.length,prevTotalElements:totalElements,extraData:_extraData})"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"SEQUENCER_PUBLISH_WINDOW": "uint256", "_batch": "bytes32[]", "_chainId": "uint256", "_extraData": "bytes", "batchHeader": "Lib_OVMCodec.ChainBatchHeader", "block.timestamp": "uint256", "lastSequencerTimestamp": "uint40", "msg.sender": "address", "proposer": "address", "totalElements": "uint40"}, "info": ["StateCommitmentChain", "_appendBatchByChainId", "StateBatchAppended", ["_chainId--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables", "batchHeader_element--variables"]], "related_expression": ["(totalElements,lastSequencerTimestamp)=_getBatchExtraDataByChainId(_chainId)", "not(msg.sender==proposer)", "lastSequencerTimestamp+SEQUENCER_PUBLISH_WINDOW<block.timestamp", "batchHeader=Lib_OVMCodec.ChainBatchHeader({batchIndex:getTotalBatchesByChainId(_chainId),batchRoot:Lib_MerkleTree.getMerkleRoot(_batch),batchSize:_batch.length,prevTotalElements:totalElements,extraData:_extraData})"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "_chainId": "uint256"}, "info": ["StateCommitmentChain", "_deleteBatchByChainId", "StateBatchDeleted", ["_chainId--variables", "_batchHeader_element--variables", "_batchHeader_element--variables"]], "related_expression": ["_batchHeader.batchIndex<batches().lengthByChainId(_chainId)", "_isValidBatchHeaderByChainId(_chainId,_batchHeader)", "batches().deleteElementsAfterInclusiveByChainId(_chainId,_batchHeader.batchIndex,_makeBatchExtraDataByChainId(_chainId,uint40(_batchHeader.prevTotalElements),0))"], "related_expression_type": ["Condition", "Condition", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_dataSize": "uint256", "batchIndex": "uint256", "batchTime": "uint256", "batchesRef": "IChainStorageContainer", "block.timestamp": "uint256", "ctc": "address", "msg.data": "bytes", "msg.sender": "address", "numContexts": "uint24", "posRoot": "uint256", "posTs": "uint256", "posTxSize": "uint256", "ptr_appendSequencerBatchByChainId_asm_2": "uint256", "root": "bytes32", "shouldStartAtElement": "uint40", "size_appendSequencerBatchByChainId_asm_2": "uint256", "success": "bool", "totalElementsToAppend": "uint24", "txBatchSize": "uint256", "txSize": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "result": "bytes"}, "info": ["MVM_CanonicalTransaction", "appendSequencerBatchByChainId", "AppendBatchElement", ["_chainId--variables", "batchIndex--variables", "shouldStartAtElement--variables", "totalElementsToAppend--variables", "txSize--variables", "batchTime--variables", "root--variables"]], "related_expression": ["_chainId=calldataload(uint256)(4)", "shouldStartAtElement=calldataload(uint256)(36)>>216", "totalElementsToAppend=calldataload(uint256)(41)>>232", "numContexts=calldataload(uint256)(44)>>232", "msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "posTs=47+16*numContexts", "_dataSize>posTs", "posTxSize=7+posTs", "posRoot=11+posTs", "batchTime=calldataload(uint256)(posTs)>>204", "txSize=calldataload(uint256)(posTxSize)>>224", "root=calldataload(uint256)(posRoot)", "txSize/2<=txBatchSize", "ctc=resolve(CanonicalTransactionChain)", "batchesRef=ICanonicalTransactionChain(ctc).batches()", "batchIndex=batchesRef.lengthByChainId(_chainId)", "(success,result)=ctc.call(msg.data)", "success==false", "queueBatchElement[_chainId][batchIndex]=BatchElement({shouldStartAtElement:shouldStartAtElement,totalElementsToAppend:totalElementsToAppend,txBatchSize:txSize,txBatchTime:batchTime,root:root,timestamp:block.timestamp})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_dataSize": "uint256", "batchIndex": "uint256", "batchTime": "uint256", "batchesRef": "IChainStorageContainer", "block.timestamp": "uint256", "ctc": "address", "msg.data": "bytes", "msg.sender": "address", "numContexts": "uint24", "posRoot": "uint256", "posTs": "uint256", "posTxSize": "uint256", "ptr_appendSequencerBatchByChainId_asm_2": "uint256", "root": "bytes32", "shouldStartAtElement": "uint40", "size_appendSequencerBatchByChainId_asm_2": "uint256", "success": "bool", "totalElementsToAppend": "uint24", "txBatchSize": "uint256", "txSize": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "result": "bytes"}, "info": ["MVM_CanonicalTransaction", "appendSequencerBatchByChainId", "AppendBatchElement", ["_chainId--variables", "batchIndex--variables", "shouldStartAtElement--variables", "totalElementsToAppend--variables", "txSize--variables", "batchTime--variables", "root--variables"]], "related_expression": ["_chainId=calldataload(uint256)(4)", "shouldStartAtElement=calldataload(uint256)(36)>>216", "totalElementsToAppend=calldataload(uint256)(41)>>232", "numContexts=calldataload(uint256)(44)>>232", "msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "posTs=47+16*numContexts", "_dataSize>posTs", "posTxSize=7+posTs", "posRoot=11+posTs", "batchTime=calldataload(uint256)(posTs)>>204", "txSize=calldataload(uint256)(posTxSize)>>224", "root=calldataload(uint256)(posRoot)", "txSize/2<=txBatchSize", "ctc=resolve(CanonicalTransactionChain)", "batchesRef=ICanonicalTransactionChain(ctc).batches()", "batchIndex=batchesRef.lengthByChainId(_chainId)", "(success,result)=ctc.call(msg.data)", "not(success==false)", "queueBatchElement[_chainId][batchIndex]=BatchElement({shouldStartAtElement:shouldStartAtElement,totalElementsToAppend:totalElementsToAppend,txBatchSize:txSize,txBatchTime:batchTime,root:root,timestamp:block.timestamp})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_dataSize": "uint256", "batchIndex": "uint256", "batchTime": "uint256", "batchesRef": "IChainStorageContainer", "block.timestamp": "uint256", "ctc": "address", "msg.data": "bytes", "msg.sender": "address", "numContexts": "uint24", "posRoot": "uint256", "posTs": "uint256", "posTxSize": "uint256", "ptr_appendSequencerBatchByChainId_asm_2": "uint256", "root": "bytes32", "shouldStartAtElement": "uint40", "size_appendSequencerBatchByChainId_asm_2": "uint256", "success": "bool", "totalElementsToAppend": "uint24", "txBatchSize": "uint256", "txSize": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "result": "bytes"}, "info": ["MVM_CanonicalTransaction", "appendSequencerBatchByChainId", "AppendBatchElement", ["_chainId--variables", "batchIndex--variables", "shouldStartAtElement--variables", "totalElementsToAppend--variables", "txSize--variables", "batchTime--variables", "root--variables"]], "related_expression": ["_chainId=calldataload(uint256)(4)", "shouldStartAtElement=calldataload(uint256)(36)>>216", "totalElementsToAppend=calldataload(uint256)(41)>>232", "numContexts=calldataload(uint256)(44)>>232", "msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "posTs=47+16*numContexts", "not(_dataSize>posTs)", "ctc=resolve(CanonicalTransactionChain)", "batchesRef=ICanonicalTransactionChain(ctc).batches()", "batchIndex=batchesRef.lengthByChainId(_chainId)", "(success,result)=ctc.call(msg.data)", "success==false", "queueBatchElement[_chainId][batchIndex]=BatchElement({shouldStartAtElement:shouldStartAtElement,totalElementsToAppend:totalElementsToAppend,txBatchSize:txSize,txBatchTime:batchTime,root:root,timestamp:block.timestamp})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_dataSize": "uint256", "batchIndex": "uint256", "batchTime": "uint256", "batchesRef": "IChainStorageContainer", "block.timestamp": "uint256", "ctc": "address", "msg.data": "bytes", "msg.sender": "address", "numContexts": "uint24", "posRoot": "uint256", "posTs": "uint256", "posTxSize": "uint256", "ptr_appendSequencerBatchByChainId_asm_2": "uint256", "root": "bytes32", "shouldStartAtElement": "uint40", "size_appendSequencerBatchByChainId_asm_2": "uint256", "success": "bool", "totalElementsToAppend": "uint24", "txBatchSize": "uint256", "txSize": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "result": "bytes"}, "info": ["MVM_CanonicalTransaction", "appendSequencerBatchByChainId", "AppendBatchElement", ["_chainId--variables", "batchIndex--variables", "shouldStartAtElement--variables", "totalElementsToAppend--variables", "txSize--variables", "batchTime--variables", "root--variables"]], "related_expression": ["_chainId=calldataload(uint256)(4)", "shouldStartAtElement=calldataload(uint256)(36)>>216", "totalElementsToAppend=calldataload(uint256)(41)>>232", "numContexts=calldataload(uint256)(44)>>232", "msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "posTs=47+16*numContexts", "not(_dataSize>posTs)", "ctc=resolve(CanonicalTransactionChain)", "batchesRef=ICanonicalTransactionChain(ctc).batches()", "batchIndex=batchesRef.lengthByChainId(_chainId)", "(success,result)=ctc.call(msg.data)", "not(success==false)", "queueBatchElement[_chainId][batchIndex]=BatchElement({shouldStartAtElement:shouldStartAtElement,totalElementsToAppend:totalElementsToAppend,txBatchSize:txSize,txBatchTime:batchTime,root:root,timestamp:block.timestamp})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "_leafIndex": "uint256", "_proof": "bytes32[]", "_totalLeaves": "uint256", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForStake", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_222_element--variables", "True--bool", "True--bool"]], "related_expression": ["msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,_leafIndex,_totalLeaves,_proof,true)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[queueTxDataRequestStake[_chainId][_blockNumber].sender]", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=address(this).balance", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.SEQ_SET", "queueTxDataRequestStake[_chainId][_blockNumber].amount>0", "verifierStakes[queueTxDataRequestStake[_chainId][_blockNumber].sender]-=queueTxDataRequestStake[_chainId][_blockNumber].amount", "(success)=address(msg.sender).call{value:queueTxDataRequestStake[_chainId][_blockNumber].amount}()", "success", "queueTxDataRequestStake[_chainId][_blockNumber].amount=0"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_-=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "_leafIndex": "uint256", "_proof": "bytes32[]", "_totalLeaves": "uint256", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForStake", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_222_element--variables", "True--bool", "True--bool"]], "related_expression": ["msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,_leafIndex,_totalLeaves,_proof,true)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[queueTxDataRequestStake[_chainId][_blockNumber].sender]", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=address(this).balance", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.SEQ_SET", "not(queueTxDataRequestStake[_chainId][_blockNumber].amount>0)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "_leafIndex": "uint256", "_proof": "bytes32[]", "_totalLeaves": "uint256", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForStake", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_222_element--variables", "True--bool", "True--bool"]], "related_expression": ["msg.sender==resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,_leafIndex,_totalLeaves,_proof,true)", "not(queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender", "queueTxDataRequestStake[_chainId][_blockNumber].endtime+stakeSeqSeconds<block.timestamp", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.VERIFIER_SET", "claimer=queueTxDataRequestStake[_chainId][_blockNumber].sender", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[claimer]&&queueTxDataRequestStake[_chainId][_blockNumber].amount>0", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=address(this).balance", "verifierStakes[claimer]-=queueTxDataRequestStake[_chainId][_blockNumber].amount", "(success)=address(claimer).call{value:queueTxDataRequestStake[_chainId][_blockNumber].amount}()", "success", "queueTxDataRequestStake[_chainId][_blockNumber].amount=0"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_-=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender", "queueTxDataRequestStake[_chainId][_blockNumber].endtime+stakeSeqSeconds<block.timestamp", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.VERIFIER_SET", "claimer=queueTxDataRequestStake[_chainId][_blockNumber].sender", "not(queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[claimer]&&queueTxDataRequestStake[_chainId][_blockNumber].amount>0)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender", "queueTxDataRequestStake[_chainId][_blockNumber].endtime+stakeSeqSeconds<block.timestamp", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "not(queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "not(queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender)", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.VERIFIER_SET", "claimer=queueTxDataRequestStake[_chainId][_blockNumber].sender", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[claimer]&&queueTxDataRequestStake[_chainId][_blockNumber].amount>0", "queueTxDataRequestStake[_chainId][_blockNumber].amount<=address(this).balance", "verifierStakes[claimer]-=queueTxDataRequestStake[_chainId][_blockNumber].amount", "(success)=address(claimer).call{value:queueTxDataRequestStake[_chainId][_blockNumber].amount}()", "success", "queueTxDataRequestStake[_chainId][_blockNumber].amount=0"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_-=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "not(queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender)", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT", "queueTxDataRequestStake[_chainId][_blockNumber].status=STAKESTATUS.VERIFIER_SET", "claimer=queueTxDataRequestStake[_chainId][_blockNumber].sender", "not(queueTxDataRequestStake[_chainId][_blockNumber].amount<=verifierStakes[claimer]&&queueTxDataRequestStake[_chainId][_blockNumber].amount>0)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "block.timestamp": "uint256", "claimer": "address", "msg.sender": "address", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeSeqSeconds": "uint256", "success": "bool", "this": "address", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "setBatchTxDataForVerifier", "SetBatchTxData", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "REF_273_element--variables", "False--bool", "False--bool"]], "related_expression": ["msg.sender!=resolve(string(abi.encodePacked(uint2str(_chainId),_MVM_Sequencer_Wrapper)))", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].batchIndex==_batchIndex", "queueTxDataRequestStake[_chainId][_blockNumber].endtime<block.timestamp", "not(queueTxDataRequestStake[_chainId][_blockNumber].sender!=msg.sender)", "_setBatchTxData(_chainId,_batchIndex,_blockNumber,_data,0,0,newbytes32[](0),false)", "not(queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.INIT)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "CallExpression", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted"], "vars": {"_amount": "uint256", "_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "block.timestamp": "uint256", "msg.sender": "address", "msg.value": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeBaseCost": "uint256", "stakeCost": "uint256", "stakeSeqSeconds": "uint256", "stateChain": "StateCommitmentChain", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "verifierStake", "VerifierStake", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "_amount--variables"]], "related_expression": ["_amount=msg.value", "stakeCost=getStakeCostByBatch(_chainId,_batchIndex)", "stakeBaseCost>0", "stakeCost==_amount", "stakeSeqSeconds>0", "queueBatchElement[_chainId][_batchIndex].txBatchTime>0", "queueBatchElement[_chainId][_batchIndex].totalElementsToAppend+queueBatchElement[_chainId][_batchIndex].shouldStartAtElement>=_blockNumber&&queueBatchElement[_chainId][_batchIndex].shouldStartAtElement<_blockNumber", "queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0", "queueTxDataRequestStake[_chainId][_blockNumber].status==STAKESTATUS.PAYBACK", "queueBatchElement[_chainId][_batchIndex].timestamp+stateChain.FRAUD_PROOF_WINDOW()>block.timestamp", "queueTxDataRequestStake[_chainId][_blockNumber]=TxDataRequestStake({sender:msg.sender,blockNumber:_blockNumber,batchIndex:_batchIndex,timestamp:block.timestamp,endtime:block.timestamp+stakeSeqSeconds,amount:_amount,status:STAKESTATUS.INIT})", "verifierStakes[msg.sender]+=_amount"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted"], "vars": {"_amount": "uint256", "_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "block.timestamp": "uint256", "msg.sender": "address", "msg.value": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "queueTxDataRequestStake": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataRequestStake))", "stakeBaseCost": "uint256", "stakeCost": "uint256", "stakeSeqSeconds": "uint256", "stateChain": "StateCommitmentChain", "verifierStakes": "mapping(address => uint256)"}, "info": ["MVM_CanonicalTransaction", "verifierStake", "VerifierStake", ["msg.sender--variables", "_chainId--variables", "_batchIndex--variables", "_blockNumber--variables", "_amount--variables"]], "related_expression": ["_amount=msg.value", "stakeCost=getStakeCostByBatch(_chainId,_batchIndex)", "stakeBaseCost>0", "stakeCost==_amount", "stakeSeqSeconds>0", "queueBatchElement[_chainId][_batchIndex].txBatchTime>0", "queueBatchElement[_chainId][_batchIndex].totalElementsToAppend+queueBatchElement[_chainId][_batchIndex].shouldStartAtElement>=_blockNumber&&queueBatchElement[_chainId][_batchIndex].shouldStartAtElement<_blockNumber", "not(queueTxDataRequestStake[_chainId][_blockNumber].timestamp>0)", "queueBatchElement[_chainId][_batchIndex].timestamp+stateChain.FRAUD_PROOF_WINDOW()>block.timestamp", "queueTxDataRequestStake[_chainId][_blockNumber]=TxDataRequestStake({sender:msg.sender,blockNumber:_blockNumber,batchIndex:_batchIndex,timestamp:block.timestamp,endtime:block.timestamp+stakeSeqSeconds,amount:_amount,status:STAKESTATUS.INIT})", "verifierStakes[msg.sender]+=_amount"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+="]}]