[{"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_data": "bytes", "_from": "address", "_l2Gas": "uint32", "_to": "address", "addressmgr": "address", "fee": "uint256", "l2TokenBridge": "address", "message": "bytes", "mingas": "uint32", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle"}, "info": ["L1StandardBridge", "_initiateETHDepositByChainId", "ETHDepositInitiated", ["_from--variables", "_to--variables", "msg.value--variables", "_data--variables", "_chainId--variables"]], "related_expression": ["_l2Gas<mingas", "fee<=msg.value", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,address(0),Lib_PredeployAddresses.OVM_ETH,_from,_to,msg.value-fee,_data)", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,fee)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_chainId": "uint256", "_data": "bytes", "_from": "address", "_l2Gas": "uint32", "_to": "address", "addressmgr": "address", "fee": "uint256", "l2TokenBridge": "address", "message": "bytes", "mingas": "uint32", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle"}, "info": ["L1StandardBridge", "_initiateETHDepositByChainId", "ETHDepositInitiated", ["_from--variables", "_to--variables", "msg.value--variables", "_data--variables", "_chainId--variables"]], "related_expression": ["not(_l2Gas<mingas)", "fee<=msg.value", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,address(0),Lib_PredeployAddresses.OVM_ETH,_from,_to,msg.value-fee,_data)", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,fee)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20ChainID", ["_chainId--variables"]], "related_expression": ["_l2Gas<uint32(oracle.getMinL2Gas())", "_l2Gas*oracle.getDiscount()<=msg.value", "_l1Token==metis", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,msg.value)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20ChainID", ["_chainId--variables"]], "related_expression": ["_l2Gas<uint32(oracle.getMinL2Gas())", "_l2Gas*oracle.getDiscount()<=msg.value", "not(_l1Token==metis)", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,msg.value)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20ChainID", ["_chainId--variables"]], "related_expression": ["not(_l2Gas<uint32(oracle.getMinL2Gas()))", "_l2Gas*oracle.getDiscount()<=msg.value", "_l1Token==metis", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,msg.value)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20ChainID", ["_chainId--variables"]], "related_expression": ["not(_l2Gas<uint32(oracle.getMinL2Gas()))", "_l2Gas*oracle.getDiscount()<=msg.value", "not(_l1Token==metis)", "sendCrossDomainMessageViaChainId(_chainId,l2TokenBridge,_l2Gas,message,msg.value)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20DepositInitiated", ["_l1Token--variables", "_l2Token--variables", "_from--variables", "_to--variables", "_amount--variables", "_data--variables"]], "related_expression": ["_l2Gas<uint32(oracle.getMinL2Gas())", "_l2Gas*oracle.getDiscount()<=msg.value", "IERC20(_l1Token).safeTransferFrom(_from,address(this),_amount)", "_l1Token==metis", "_l2Token=Lib_PredeployAddresses.MVM_COINBASE", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,address(0),Lib_PredeployAddresses.MVM_COINBASE,_from,_to,_amount,_data)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20DepositInitiated", ["_l1Token--variables", "_l2Token--variables", "_from--variables", "_to--variables", "_amount--variables", "_data--variables"]], "related_expression": ["_l2Gas<uint32(oracle.getMinL2Gas())", "_l2Gas*oracle.getDiscount()<=msg.value", "IERC20(_l1Token).safeTransferFrom(_from,address(this),_amount)", "not(_l1Token==metis)", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,_l1Token,_l2Token,_from,_to,_amount,_data)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20DepositInitiated", ["_l1Token--variables", "_l2Token--variables", "_from--variables", "_to--variables", "_amount--variables", "_data--variables"]], "related_expression": ["not(_l2Gas<uint32(oracle.getMinL2Gas()))", "_l2Gas*oracle.getDiscount()<=msg.value", "IERC20(_l1Token).safeTransferFrom(_from,address(this),_amount)", "_l1Token==metis", "_l2Token=Lib_PredeployAddresses.MVM_COINBASE", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,address(0),Lib_PredeployAddresses.MVM_COINBASE,_from,_to,_amount,_data)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainId": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Gas": "uint32", "_l2Token": "address", "_to": "address", "addressmgr": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))", "l2TokenBridge": "address", "message": "bytes", "metis": "address", "msg.value": "uint256", "oracle": "iMVM_DiscountOracle", "this": "address"}, "info": ["L1StandardBridge", "_initiateERC20DepositByChainId", "ERC20DepositInitiated", ["_l1Token--variables", "_l2Token--variables", "_from--variables", "_to--variables", "_amount--variables", "_data--variables"]], "related_expression": ["not(_l2Gas<uint32(oracle.getMinL2Gas()))", "_l2Gas*oracle.getDiscount()<=msg.value", "IERC20(_l1Token).safeTransferFrom(_from,address(this),_amount)", "not(_l1Token==metis)", "message=abi.encodeWithSelector(IL2ERC20Bridge.finalizeDeposit.selector,_l1Token,_l2Token,_from,_to,_amount,_data)", "deposits[_l1Token][_chainId][_l2Token]=deposits[_l1Token][_chainId][_l2Token]+(_amount)"], "related_expression_type": ["Condition", "Condition", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyFromCrossDomainAccount"], "vars": {"DEFAULT_CHAINID": "uint256", "_amount": "uint256", "_data": "bytes", "_from": "address", "_to": "address", "l2TokenBridge": "address", "success": "bool"}, "info": ["L1StandardBridge", "finalizeETHWithdrawal", "ETHWithdrawalFinalized", ["_from--variables", "_to--variables", "_amount--variables", "_data--variables", "DEFAULT_CHAINID--variables"]], "related_expression": ["(success)=_to.call{value:_amount}(newbytes(0))", "success"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyFromCrossDomainAccount"], "vars": {"_amount": "uint256", "_chainid": "uint256", "_data": "bytes", "_from": "address", "_to": "address", "l2TokenBridge": "address", "success": "bool"}, "info": ["L1StandardBridge", "finalizeETHWithdrawalByChainId", "ETHWithdrawalFinalized", ["_from--variables", "_to--variables", "_amount--variables", "_data--variables", "_chainid--variables"]], "related_expression": ["(success)=_to.call{value:_amount}(newbytes(0))", "success"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainid": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Token": "address", "_to": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))"}, "info": ["L1StandardBridge", "_finalizeERC20WithdrawalByChainId", "ERC20ChainID", ["_chainid--variables"]], "related_expression": ["deposits[_l1Token][_chainid][_l2Token]=deposits[_l1Token][_chainid][_l2Token]-_amount"], "related_expression_type": ["AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_amount": "uint256", "_chainid": "uint256", "_data": "bytes", "_from": "address", "_l1Token": "address", "_l2Token": "address", "_to": "address", "deposits": "mapping(address => mapping(uint256 => mapping(address => uint256)))"}, "info": ["L1StandardBridge", "_finalizeERC20WithdrawalByChainId", "ERC20WithdrawalFinalized", ["_l1Token--variables", "_l2Token--variables", "_from--variables", "_to--variables", "_amount--variables", "_data--variables"]], "related_expression": ["deposits[_l1Token][_chainid][_l2Token]=deposits[_l1Token][_chainid][_l2Token]-_amount", "IERC20(_l1Token).safeTransfer(_to,_amount)"], "related_expression_type": ["AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Lib_AddressManager", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_address": "address", "_name": "string", "addresses": "mapping(bytes32 => address)", "nameHash": "bytes32", "oldAddress": "address"}, "info": ["Lib_AddressManager", "setAddress", "AddressSet", ["_name--variables", "_address--variables", "oldAddress--variables"]], "related_expression": ["nameHash=_getNameHash(_name)", "oldAddress=addresses[nameHash]", "addresses[nameHash]=_address"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Ownable", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}]