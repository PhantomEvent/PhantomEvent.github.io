[{"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_avatar": "address", "avatar": "address", "previousAvatar": "address"}, "info": ["OptimisticGovernor", "setAvatar", "AvatarSet", ["previousAvatar--variables", "_avatar--variables"]], "related_expression": ["previousAvatar=avatar", "avatar=_avatar"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_target": "address", "previousTarget": "address", "target": "address"}, "info": ["OptimisticGovernor", "setTarget", "TargetSet", ["previousTarget--variables", "_target--variables"]], "related_expression": ["previousTarget=target", "target=_target"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["OptimisticGovernor", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId)", "revertNotIERC165Compliant(address)(_guard)", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["OptimisticGovernor", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "not(!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId))", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["OptimisticGovernor", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["not(_guard!=address(0))", "guard=_guard"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["OptimisticGovernor", "_transferOwnership", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["OptimisticGovernor", "_disableInitializers", "Initialized", ["TMP_311--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["initializer"], "vars": {"_bondAmount": "uint256", "_collateral": "address", "_identifier": "bytes32", "_liveness": "uint64", "_owner": "address", "_rules": "string", "address": "address", "avatar": "address", "bytes32": "bytes32", "initializeParams": "bytes", "string": "string", "target": "address", "uint256": "uint256", "uint64": "uint64"}, "info": ["OptimisticGovernor", "setUp", "OptimisticGovernorDeployed", ["_owner--variables", "avatar--variables", "target--variables"]], "related_expression": ["(_owner,_collateral,_bondAmount,_rules,_identifier,_liveness)=abi.decode(initializeParams,(address,address,uint256,string,bytes32,uint64))", "setAvatar(_owner)", "setTarget(_owner)", "transferOwnership(_owner)"], "related_expression_type": ["AssignmentOperation_=", "CallExpression", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_bondAmount": "uint256", "_collateral": "IERC20", "bondAmount": "uint256", "collateral": "IERC20"}, "info": ["OptimisticGovernor", "setCollateralAndBond", "SetCollateralAndBond", ["_collateral--variables", "_bondAmount--variables"]], "related_expression": ["_getCollateralWhitelist().isOnWhitelist(address(_collateral))", "collateral=_collateral", "bondAmount=_bondAmount"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"TMP_338": "bytes", "_rules": "string", "rules": "string"}, "info": ["OptimisticGovernor", "setRules", "SetRules", ["_rules--variables"]], "related_expression": ["bytes(_rules).length>0", "rules=_rules"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_liveness": "uint64", "liveness": "uint64"}, "info": ["OptimisticGovernor", "setLiveness", "SetLiveness", ["_liveness--variables"]], "related_expression": ["_liveness>0", "_liveness<3144960000", "liveness=_liveness"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_identifier": "bytes32", "identifier": "bytes32"}, "info": ["OptimisticGovernor", "setIdentifier", "SetIdentifier", ["_identifier--variables"]], "related_expression": ["_getIdentifierWhitelist().isIdentifierSupported(_identifier)", "identifier=_identifier"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_escalationManager": "address", "escalationManager": "address"}, "info": ["OptimisticGovernor", "setEscalationManager", "SetEscalationManager", ["_escalationManager--variables"]], "related_expression": ["_isContract(_escalationManager)||_escalationManager==address(0)", "escalationManager=_escalationManager"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": true, "loop_info": [4, 8], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "claim": "bytes", "collateral": "IERC20", "encodedResolution": "bytes", "escalationManager": "address", "explanation": "bytes", "i": "uint256", "identifier": "bytes32", "liveness": "uint64", "msg.sender": "address", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposal": "OptimisticGovernor.Proposal", "proposalHash": "bytes32", "proposer": "address", "resolution": "OptimisticGovernor.VoteResolutionData", "rules": "string", "this": "address", "time": "uint256", "totalBond": "uint256", "transactions": "OptimisticGovernor.Transaction[]", "proposalHashes": "mapping(bytes32 => bytes32)", "voteResolutions": "mapping(bytes32 => OptimisticGovernor.VoteResolution)"}, "info": ["OptimisticGovernor", "proposeTransactions", "TransactionsProposed", ["proposer--variables", "time--variables", "assertionId--variables", "proposal--variables", "proposalHash--variables", "explanation--variables", "rules--variables", "TMP_386--variables"]], "related_expression": ["time=getCurrentTime()", "proposer=msg.sender", "proposal.requestTime=time", "i=0", "transactions[i].data.length>0", "_isContract(transactions[i].to)", "i++", "i<transactions.length", "transactions[i].to!=address(0)", "proposal.transactions=transactions", "proposalHash=keccak256(bytes)(abi.encode(transactions))", "claim=_constructClaim(proposalHash,explanation)", "assertionIds[proposalHash]==bytes32(0)", "totalBond=getProposalBond()", "collateral.safeTransferFrom(proposer,address(this),totalBond)", "collateral.safeIncreaseAllowance(address(optimisticOracleV3),totalBond)", "assertionId=optimisticOracleV3.assertTruth(claim,proposer,address(this),escalationManager,liveness,collateral,totalBond,identifier,bytes32(0))", "assertionIds[proposalHash]=assertionId", "proposalHashes[assertionId]=proposalHash"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Expression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": true, "loop_info": [4, 4], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "claim": "bytes", "collateral": "IERC20", "encodedResolution": "bytes", "escalationManager": "address", "explanation": "bytes", "i": "uint256", "identifier": "bytes32", "liveness": "uint64", "msg.sender": "address", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposal": "OptimisticGovernor.Proposal", "proposalHash": "bytes32", "proposer": "address", "resolution": "OptimisticGovernor.VoteResolutionData", "rules": "string", "this": "address", "time": "uint256", "totalBond": "uint256", "transactions": "OptimisticGovernor.Transaction[]", "proposalHashes": "mapping(bytes32 => bytes32)", "voteResolutions": "mapping(bytes32 => OptimisticGovernor.VoteResolution)"}, "info": ["OptimisticGovernor", "proposeTransactions", "TransactionsProposed", ["proposer--variables", "time--variables", "assertionId--variables", "proposal--variables", "proposalHash--variables", "explanation--variables", "rules--variables", "TMP_386--variables"]], "related_expression": ["time=getCurrentTime()", "proposer=msg.sender", "proposal.requestTime=time", "i=0", "not(i<transactions.length)", "proposal.transactions=transactions", "proposalHash=keccak256(bytes)(abi.encode(transactions))", "claim=_constructClaim(proposalHash,explanation)", "assertionIds[proposalHash]==bytes32(0)", "totalBond=getProposalBond()", "collateral.safeTransferFrom(proposer,address(this),totalBond)", "collateral.safeIncreaseAllowance(address(optimisticOracleV3),totalBond)", "assertionId=optimisticOracleV3.assertTruth(claim,proposer,address(this),escalationManager,liveness,collateral,totalBond,identifier,bytes32(0))", "assertionIds[proposalHash]=assertionId", "proposalHashes[assertionId]=proposalHash"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": true, "loop_info": [2, 6], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "claim": "bytes", "collateral": "IERC20", "encodedResolution": "bytes", "escalationManager": "address", "explanation": "bytes", "i": "uint256", "identifier": "bytes32", "liveness": "uint64", "msg.sender": "address", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposal": "OptimisticGovernor.Proposal", "proposalHash": "bytes32", "proposer": "address", "resolution": "OptimisticGovernor.VoteResolutionData", "rules": "string", "this": "address", "time": "uint256", "totalBond": "uint256", "transactions": "OptimisticGovernor.Transaction[]", "proposalHashes": "mapping(bytes32 => bytes32)", "voteResolutions": "mapping(bytes32 => OptimisticGovernor.VoteResolution)"}, "info": ["OptimisticGovernor", "proposeTransactions", "VoteResolved", ["assertionId--variables", "proposalHash--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables"]], "related_expression": ["proposer=msg.sender", "i=0", "transactions[i].data.length>0", "_isContract(transactions[i].to)", "i++", "i<transactions.length", "transactions[i].to!=address(0)", "proposal.transactions=transactions", "proposalHash=keccak256(bytes)(abi.encode(transactions))", "claim=_constructClaim(proposalHash,explanation)", "assertionIds[proposalHash]==bytes32(0)", "totalBond=getProposalBond()", "collateral.safeTransferFrom(proposer,address(this),totalBond)", "collateral.safeIncreaseAllowance(address(optimisticOracleV3),totalBond)", "assertionId=optimisticOracleV3.assertTruth(claim,proposer,address(this),escalationManager,liveness,collateral,totalBond,identifier,bytes32(0))", "assertionIds[proposalHash]=assertionId", "proposalHashes[assertionId]=proposalHash", "TransactionsProposed(proposer,time,assertionId,proposal,proposalHash,explanation,rules,time+liveness)", "resolution=abi.decode(encodedResolution,(VoteResolutionData))", "voteResolutions[assertionId]=VoteResolution({forVotes:resolution.forVotes,againstVotes:resolution.againstVotes,abstainVotes:resolution.abstainVotes,voteMerkleRoot:resolution.voteMerkleRoot,proposalHash:proposalHash,assertionId:assertionId})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Expression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": true, "loop_info": [2, 2], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "claim": "bytes", "collateral": "IERC20", "encodedResolution": "bytes", "escalationManager": "address", "explanation": "bytes", "i": "uint256", "identifier": "bytes32", "liveness": "uint64", "msg.sender": "address", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposal": "OptimisticGovernor.Proposal", "proposalHash": "bytes32", "proposer": "address", "resolution": "OptimisticGovernor.VoteResolutionData", "rules": "string", "this": "address", "time": "uint256", "totalBond": "uint256", "transactions": "OptimisticGovernor.Transaction[]", "proposalHashes": "mapping(bytes32 => bytes32)", "voteResolutions": "mapping(bytes32 => OptimisticGovernor.VoteResolution)"}, "info": ["OptimisticGovernor", "proposeTransactions", "VoteResolved", ["assertionId--variables", "proposalHash--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables", "resolution_element--variables"]], "related_expression": ["proposer=msg.sender", "i=0", "not(i<transactions.length)", "proposal.transactions=transactions", "proposalHash=keccak256(bytes)(abi.encode(transactions))", "claim=_constructClaim(proposalHash,explanation)", "assertionIds[proposalHash]==bytes32(0)", "totalBond=getProposalBond()", "collateral.safeTransferFrom(proposer,address(this),totalBond)", "collateral.safeIncreaseAllowance(address(optimisticOracleV3),totalBond)", "assertionId=optimisticOracleV3.assertTruth(claim,proposer,address(this),escalationManager,liveness,collateral,totalBond,identifier,bytes32(0))", "assertionIds[proposalHash]=assertionId", "proposalHashes[assertionId]=proposalHash", "TransactionsProposed(proposer,time,assertionId,proposal,proposalHash,explanation,rules,time+liveness)", "resolution=abi.decode(encodedResolution,(VoteResolutionData))", "voteResolutions[assertionId]=VoteResolution({forVotes:resolution.forVotes,againstVotes:resolution.againstVotes,abstainVotes:resolution.abstainVotes,voteMerkleRoot:resolution.voteMerkleRoot,proposalHash:proposalHash,assertionId:assertionId})"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"assertionId": "bytes32", "leaf": "bytes32", "merkleProof": "bytes32[]", "msg.sender": "address", "voteAbstain": "uint256", "voteAgainst": "uint256", "voteFor": "uint256", "voteResolutions": "mapping(bytes32 => OptimisticGovernor.VoteResolution)"}, "info": ["OptimisticGovernor", "congratulate", "Congratulated", ["msg.sender--variables", "assertionId--variables", "voteFor--variables", "voteAgainst--variables", "voteAbstain--variables"]], "related_expression": ["leaf=keccak256(bytes)(bytes.concat(keccak256(bytes)(abi.encode(msg.sender,voteFor,voteAgainst,voteAbstain))))", "MerkleProof.verify(merkleProof,voteResolutions[assertionId].voteMerkleRoot,leaf)"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [7], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "i": "uint256", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)", "transaction": "OptimisticGovernor.Transaction", "transactions": "OptimisticGovernor.Transaction[]"}, "info": ["OptimisticGovernor", "executeProposal", "TransactionExecuted", ["proposalHash--variables", "assertionId--variables", "i--variables"]], "related_expression": ["proposalHash=keccak256(bytes)(abi.encode(transactions))", "assertionId=assertionIds[proposalHash]", "assertionId!=bytes32(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]", "optimisticOracleV3.settleAndGetAssertionResult(assertionId)", "i=0", "i++", "i<transactions.length", "transaction=transactions[i]", "exec(transaction.to,transaction.value,transaction.data,transaction.operation)", "transaction=transactions[i]", "exec(transaction.to,transaction.value,transaction.data,transaction.operation)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Expression", "CallExpression", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [7], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "i": "uint256", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)", "transaction": "OptimisticGovernor.Transaction", "transactions": "OptimisticGovernor.Transaction[]"}, "info": ["OptimisticGovernor", "executeProposal", "TransactionExecuted", ["proposalHash--variables", "assertionId--variables", "i--variables"]], "related_expression": ["proposalHash=keccak256(bytes)(abi.encode(transactions))", "assertionId=assertionIds[proposalHash]", "assertionId!=bytes32(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]", "optimisticOracleV3.settleAndGetAssertionResult(assertionId)", "i=0", "i<transactions.length", "transaction=transactions[i]", "exec(transaction.to,transaction.value,transaction.data,transaction.operation)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Expression", "CallExpression", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [7, 11], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "i": "uint256", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)", "transaction": "OptimisticGovernor.Transaction", "transactions": "OptimisticGovernor.Transaction[]"}, "info": ["OptimisticGovernor", "executeProposal", "ProposalExecuted", ["proposalHash--variables", "assertionId--variables"]], "related_expression": ["proposalHash=keccak256(bytes)(abi.encode(transactions))", "assertionId=assertionIds[proposalHash]", "assertionId!=bytes32(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]", "optimisticOracleV3.settleAndGetAssertionResult(assertionId)", "i=0", "TransactionExecuted(proposalHash,assertionId,i)", "i++", "i<transactions.length", "transaction=transactions[i]", "exec(transaction.to,transaction.value,transaction.data,transaction.operation)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Expression", "CallExpression", "AssignmentOperation_=", "CallExpression", "Expression", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [7, 7], "modifier": ["nonReentrant"], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "i": "uint256", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)", "transaction": "OptimisticGovernor.Transaction", "transactions": "OptimisticGovernor.Transaction[]"}, "info": ["OptimisticGovernor", "executeProposal", "ProposalExecuted", ["proposalHash--variables", "assertionId--variables"]], "related_expression": ["proposalHash=keccak256(bytes)(abi.encode(transactions))", "assertionId=assertionIds[proposalHash]", "assertionId!=bytes32(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]", "optimisticOracleV3.settleAndGetAssertionResult(assertionId)", "i=0", "not(i<transactions.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Expression", "CallExpression", "AssignmentOperation_=", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["nonReentrant"], "vars": {"TMP_418": "OptimisticOracleV3Interface.Assertion", "assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)"}, "info": ["OptimisticGovernor", "deleteProposalOnUpgrade", "ProposalDeleted", ["proposalHash--variables", "assertionId--variables"]], "related_expression": ["proposalHash!=bytes32(0)", "assertionId=assertionIds[proposalHash]", "assertionId!=bytes32(0)", "optimisticOracleV3.getAssertion(assertionId).asserter==address(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "Condition", "Expression", "Expression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"assertionId": "bytes32", "assertionIds": "mapping(bytes32 => bytes32)", "msg.sender": "address", "optimisticOracleV3": "OptimisticOracleV3Interface", "proposalHash": "bytes32", "proposalHashes": "mapping(bytes32 => bytes32)"}, "info": ["OptimisticGovernor", "assertionDisputedCallback", "ProposalDeleted", ["proposalHash--variables", "assertionId--variables"]], "related_expression": ["proposalHash=proposalHashes[assertionId]", "msg.sender==address(optimisticOracleV3)", "proposalHash!=bytes32(0)", "deleteassertionIds[proposalHash]", "deleteproposalHashes[assertionId]"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Expression", "Expression"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"finder": "FinderInterface", "newOptimisticOracleV3": "address", "optimisticOracleV3": "OptimisticOracleV3Interface"}, "info": ["OptimisticGovernor", "_sync", "OptimisticOracleChanged", ["newOptimisticOracleV3--variables"]], "related_expression": ["newOptimisticOracleV3=finder.getImplementationAddress(OracleInterfaces.OptimisticOracleV3)", "newOptimisticOracleV3!=address(optimisticOracleV3)", "optimisticOracleV3=OptimisticOracleV3Interface(newOptimisticOracleV3)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Module", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId)", "revertNotIERC165Compliant(address)(_guard)", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Module", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "not(!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId))", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Module", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["not(_guard!=address(0))", "guard=_guard"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Module", "_transferOwnership", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["Module", "_disableInitializers", "Initialized", ["TMP_508--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_avatar": "address", "avatar": "address", "previousAvatar": "address"}, "info": ["Module", "setAvatar", "AvatarSet", ["previousAvatar--variables", "_avatar--variables"]], "related_expression": ["previousAvatar=avatar", "avatar=_avatar"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_target": "address", "previousTarget": "address", "target": "address"}, "info": ["Module", "setTarget", "TargetSet", ["previousTarget--variables", "_target--variables"]], "related_expression": ["previousTarget=target", "target=_target"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["FactoryFriendly", "_transferOwnership", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["FactoryFriendly", "_disableInitializers", "Initialized", ["TMP_586--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Guardable", "_transferOwnership", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["Guardable", "_disableInitializers", "Initialized", ["TMP_639--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Guardable", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId)", "revertNotIERC165Compliant(address)(_guard)", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Guardable", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["_guard!=address(0)", "not(!BaseGuard(_guard).supportsInterface(type()(IGuard).interfaceId))", "guard=_guard"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_guard": "address", "guard": "address"}, "info": ["Guardable", "setGuard", "ChangedGuard", ["guard--variables"]], "related_expression": ["not(_guard!=address(0))", "guard=_guard"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["OwnableUpgradeable", "_disableInitializers", "Initialized", ["TMP_678--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["OwnableUpgradeable", "_transferOwnership", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["Initializable", "_disableInitializers", "Initialized", ["TMP_724--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_initialized": "uint8", "_initializing": "bool"}, "info": ["ContextUpgradeable", "_disableInitializers", "Initialized", ["TMP_780--variables"]], "related_expression": ["!_initializing", "_initialized!=type()(uint8).max"], "related_expression_type": ["Condition", "Condition"]}]