[{"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Ownable", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"_owner": "address", "newOwner": "address", "oldOwner": "address"}, "info": ["Lib_AddressManager", "_setOwner", "OwnershipTransferred", ["oldOwner--variables", "newOwner--variables"]], "related_expression": ["oldOwner=_owner", "_owner=newOwner"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_address": "address", "_name": "string", "addresses": "mapping(bytes32 => address)", "nameHash": "bytes32", "oldAddress": "address"}, "info": ["Lib_AddressManager", "setAddress", "AddressSet", ["_name--variables", "_address--variables", "oldAddress--variables"]], "related_expression": ["nameHash=_getNameHash(_name)", "oldAddress=addresses[nameHash]", "addresses[nameHash]=_address"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted"], "vars": {"activeChallenges": "uint256", "metis": "address", "msg.sender": "address", "numQualifiedVerifiers": "uint256", "previousBalance": "uint256", "stake": "uint256", "this": "address", "verifier_stakes": "mapping(address => uint256)", "verifiers": "address[]"}, "info": ["MVM_Verifier", "verifierStake", "Stake", ["msg.sender--variables", "stake--variables"]], "related_expression": ["activeChallenges==0", "stake>0", "IERC20(metis).transferFrom(msg.sender,address(this),stake)", "verifier_stakes[msg.sender]+=stake", "isSufficientlyStaked(msg.sender)", "previousBalance==0"], "related_expression_type": ["Condition", "Condition", "Condition", "AssignmentOperation_+=", "Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted"], "vars": {"activeChallenges": "uint256", "metis": "address", "msg.sender": "address", "numQualifiedVerifiers": "uint256", "previousBalance": "uint256", "stake": "uint256", "this": "address", "verifier_stakes": "mapping(address => uint256)", "verifiers": "address[]"}, "info": ["MVM_Verifier", "verifierStake", "Stake", ["msg.sender--variables", "stake--variables"]], "related_expression": ["activeChallenges==0", "stake>0", "IERC20(metis).transferFrom(msg.sender,address(this),stake)", "verifier_stakes[msg.sender]+=stake", "isSufficientlyStaked(msg.sender)", "not(previousBalance==0)"], "related_expression_type": ["Condition", "Condition", "Condition", "AssignmentOperation_+=", "Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted", "onlyStaked"], "vars": {"activeChallenges": "uint256", "block.timestamp": "uint256", "c": "MVM_Verifier.Challenge", "cIndex": "uint256", "chainID": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)", "challenges": "MVM_Verifier.Challenge[]", "header": "Lib_OVMCodec.ChainBatchHeader", "keyhash": "bytes", "msg.sender": "address", "proposedHash": "bytes", "stateChain": "IStateCommitmentChain", "tempIndex": "uint256", "verifyWindow": "uint256", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_key_hashes": "mapping(uint256 => mapping(address => bytes))"}, "info": ["MVM_Verifier", "newChallenge", "NewChallenge", ["cIndex--variables", "chainID--variables", "header--variables", "block.timestamp--variables"]], "related_expression": ["tempIndex=chain_under_challenge[chainID]-1", "tempIndex==0||block.timestamp-challenges[tempIndex].timestamp>verifyWindow*2", "tempIndex>0", "stateChain.insideFraudProofWindow(header)", "c.chainID=chainID", "c.challenger=msg.sender", "c.timestamp=block.timestamp", "c.header=header", "challenges.push(c)", "cIndex=challenges.length-1", "challenge_hashes[cIndex][msg.sender]=proposedHash", "challenge_key_hashes[cIndex][msg.sender]=keyhash", "challenges[cIndex].numVerifiers++", "chain_under_challenge[chainID]=cIndex+1"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted", "onlyStaked"], "vars": {"activeChallenges": "uint256", "block.timestamp": "uint256", "c": "MVM_Verifier.Challenge", "cIndex": "uint256", "chainID": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)", "challenges": "MVM_Verifier.Challenge[]", "header": "Lib_OVMCodec.ChainBatchHeader", "keyhash": "bytes", "msg.sender": "address", "proposedHash": "bytes", "stateChain": "IStateCommitmentChain", "tempIndex": "uint256", "verifyWindow": "uint256", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_key_hashes": "mapping(uint256 => mapping(address => bytes))"}, "info": ["MVM_Verifier", "newChallenge", "NewChallenge", ["cIndex--variables", "chainID--variables", "header--variables", "block.timestamp--variables"]], "related_expression": ["tempIndex=chain_under_challenge[chainID]-1", "tempIndex==0||block.timestamp-challenges[tempIndex].timestamp>verifyWindow*2", "not(tempIndex>0)", "stateChain.insideFraudProofWindow(header)", "c.chainID=chainID", "c.challenger=msg.sender", "c.timestamp=block.timestamp", "c.header=header", "challenges.push(c)", "cIndex=challenges.length-1", "challenge_hashes[cIndex][msg.sender]=proposedHash", "challenge_key_hashes[cIndex][msg.sender]=keyhash", "challenges[cIndex].numVerifiers++", "chain_under_challenge[chainID]=cIndex+1"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyWhitelisted", "onlyStaked"], "vars": {"cIndex": "uint256", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "hash": "bytes", "keyhash": "bytes", "msg.sender": "address", "challenge_key_hashes": "mapping(uint256 => mapping(address => bytes))"}, "info": ["MVM_Verifier", "verify1", "Verify1", ["cIndex--variables", "msg.sender--variables"]], "related_expression": ["challenge_hashes[cIndex][msg.sender].length==0", "challenge_hashes[cIndex][msg.sender]=hash", "challenge_key_hashes[cIndex][msg.sender]=keyhash", "challenges[cIndex].numVerifiers++"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Expression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyStaked", "onlyWhitelisted"], "vars": {"block.timestamp": "uint256", "cIndex": "uint256", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_key_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "key": "bytes", "msg.sender": "address", "numQualifiedVerifiers": "uint256", "verifyWindow": "uint256"}, "info": ["MVM_Verifier", "verify2", "Verify2", ["cIndex--variables", "msg.sender--variables"]], "related_expression": ["challenges[cIndex].numVerifiers==numQualifiedVerifiers||block.timestamp-challenges[cIndex].timestamp>verifyWindow", "challenge_hashes[cIndex][msg.sender].length>0", "not(challenge_keys[cIndex][msg.sender].length>0)", "sha256(bytes)(key)==bytes32(challenge_key_hashes[cIndex][msg.sender])", "msg.sender==challenges[cIndex].challenger", "challenges[cIndex].header.batchRoot=bytes32(decrypt(abi.encodePacked(challenges[cIndex].header.batchRoot),key))", "challenge_keys[cIndex][msg.sender]=key", "challenge_hashes[cIndex][msg.sender]=decrypt(challenge_hashes[cIndex][msg.sender],key)", "challenges[cIndex].verifiers.push(msg.sender)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyStaked", "onlyWhitelisted"], "vars": {"block.timestamp": "uint256", "cIndex": "uint256", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_key_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "key": "bytes", "msg.sender": "address", "numQualifiedVerifiers": "uint256", "verifyWindow": "uint256"}, "info": ["MVM_Verifier", "verify2", "Verify2", ["cIndex--variables", "msg.sender--variables"]], "related_expression": ["challenges[cIndex].numVerifiers==numQualifiedVerifiers||block.timestamp-challenges[cIndex].timestamp>verifyWindow", "challenge_hashes[cIndex][msg.sender].length>0", "not(challenge_keys[cIndex][msg.sender].length>0)", "sha256(bytes)(key)==bytes32(challenge_key_hashes[cIndex][msg.sender])", "not(msg.sender==challenges[cIndex].challenger)", "challenge_keys[cIndex][msg.sender]=key", "challenge_hashes[cIndex][msg.sender]=decrypt(challenge_hashes[cIndex][msg.sender],key)", "challenges[cIndex].verifiers.push(msg.sender)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression"]}, {"isloop": true, "loop_info": [5, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 5], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "not(i<verifiers.length)", "Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "challenge.verifiers.length<numQualifiedVerifiers*75/100"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 5], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "challenge.verifiers.length<numQualifiedVerifiers*75/100"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [6, 13, 19, 19], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numAgrees=0", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "numAgrees<=numDisagrees", "i_scope_0=0", "not(i_scope_0<numAgrees)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [6, 6, 12, 16], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numAgrees=0", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "numAgrees<=numDisagrees", "i_scope_0=0", "consensus_strikes[agrees[i_scope_0]]>FAIL_THRESHOLD", "reward+=penalize(agrees[i_scope_0])", "i_scope_0++", "i_scope_0<numAgrees", "consensus_strikes[agrees[i_scope_0]]+=2"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [6, 6, 12, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numAgrees=0", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "numAgrees<=numDisagrees", "i_scope_0=0", "not(i_scope_0<numAgrees)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [6, 13, 21, 21], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numDisagrees=0", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "stateChain.insideFraudProofWindow(challenge.header)", "seqStake>0", "i_scope_1=0", "not(i_scope_1<numDisagrees)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [6, 6, 14, 18], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numDisagrees=0", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "stateChain.insideFraudProofWindow(challenge.header)", "seqStake>0", "i_scope_1=0", "i_scope_1++", "i_scope_1<numDisagrees", "consensus_strikes[disagrees[i_scope_1]]+=2", "consensus_strikes[disagrees[i_scope_1]]>FAIL_THRESHOLD", "reward+=penalize(disagrees[i_scope_1])"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [6, 6, 14, 14], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numDisagrees=0", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "stateChain.insideFraudProofWindow(challenge.header)", "seqStake>0", "i_scope_1=0", "not(i_scope_1<numDisagrees)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [6, 13], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numDisagrees=0", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "stateChain.insideFraudProofWindow(challenge.header)", "not(seqStake>0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [6, 6], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "numDisagrees=0", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "stateChain.insideFraudProofWindow(challenge.header)", "not(seqStake>0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "not(stateChain.insideFraudProofWindow(challenge.header))"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 5], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "proposedHash!=challenge.header.batchRoot", "not(numAgrees<=numDisagrees)", "not(stateChain.insideFraudProofWindow(challenge.header))"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "not(proposedHash!=challenge.header.batchRoot)", "consensus_strikes[challenge.challenger]>FAIL_THRESHOLD"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 5], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "not(proposedHash!=challenge.header.batchRoot)", "consensus_strikes[challenge.challenger]>FAIL_THRESHOLD"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 12], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "challenge_keys[cIndex][verifiers[i]].length==0", "absence_strikes[verifiers[i]]+=2", "absence_strikes[verifiers[i]]>ABSENCE_THRESHOLD", "reward+=penalize(verifiers[i])", "i++", "i<verifiers.length", "not(!isSufficientlyStaked(verifiers[i])||!isWhiteListed(verifiers[i]))", "not(bytes32(challenge_hashes[cIndex][verifiers[i]])==proposedHash)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "not(proposedHash!=challenge.header.batchRoot)", "not(consensus_strikes[challenge.challenger]>FAIL_THRESHOLD)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": true, "loop_info": [5, 5], "modifier": [], "vars": {"ABSENCE_THRESHOLD": "uint256", "FAIL_THRESHOLD": "uint256", "absence_strikes": "mapping(address => uint8)", "activeChallenges": "uint256", "agrees": "address[]", "block.timestamp": "uint256", "cIndex": "uint256", "challenge": "MVM_Verifier.Challenge", "challenge_hashes": "mapping(uint256 => mapping(address => bytes))", "challenge_keys": "mapping(uint256 => mapping(address => bytes))", "challenges": "MVM_Verifier.Challenge[]", "consensus_strikes": "mapping(address => uint8)", "disagrees": "address[]", "i": "uint256", "i_scope_0": "uint256", "i_scope_1": "uint256", "msg.sender": "address", "numAgrees": "uint256", "numDisagrees": "uint256", "numQualifiedVerifiers": "uint256", "proposedHash": "bytes32", "reward": "uint256", "seqStake": "uint256", "stateChain": "IStateCommitmentChain", "verifiers": "address[]", "verifyWindow": "uint256", "chain_under_challenge": "mapping(uint256 => uint256)"}, "info": ["MVM_Verifier", "finalize", "Finalize", ["cIndex--variables", "msg.sender--variables", "SETTLEMENT_element--variables"]], "related_expression": ["challenge=challenges[cIndex]", "challenge.done==false", "not(challenge.verifiers.length!=challenge.numVerifiers&&block.timestamp-challenge.timestamp<verifyWindow*2)", "proposedHash=bytes32(challenge_hashes[cIndex][challenge.challenger])", "i=0", "not(i<verifiers.length)", "not(Lib_OVMCodec.hashBatchHeader(challenge.header)!=stateChain.batches().getByChainId(challenge.chainID,challenge.header.batchIndex))", "not(challenge.verifiers.length<numQualifiedVerifiers*75/100)", "not(proposedHash!=challenge.header.batchRoot)", "not(consensus_strikes[challenge.challenger]>FAIL_THRESHOLD)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["onlyManager"], "vars": {"amount": "uint256", "metis": "address", "msg.sender": "address", "seqStake": "uint256", "this": "address"}, "info": ["MVM_Verifier", "depositSeqStake", "Stake", ["msg.sender--variables", "amount--variables"]], "related_expression": ["IERC20(metis).transferFrom(msg.sender,address(this),amount)", "seqStake+=amount"], "related_expression_type": ["Condition", "AssignmentOperation_+="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyManager"], "vars": {"amount": "uint256", "metis": "address", "msg.sender": "address", "seqStake": "uint256", "to": "address"}, "info": ["MVM_Verifier", "withdrawSeqStake", "Withdraw", ["msg.sender--variables", "seqStake--variables"]], "related_expression": ["seqStake>0"], "related_expression_type": ["Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"amount": "uint256", "metis": "address", "msg.sender": "address", "rewards": "mapping(address => uint256)"}, "info": ["MVM_Verifier", "claim", "Claim", ["msg.sender--variables", "amount--variables"]], "related_expression": ["rewards[msg.sender]>0", "amount=rewards[msg.sender]", "rewards[msg.sender]=0", "IERC20(metis).transfer(msg.sender,amount)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"isloop": true, "loop_info": [2], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "reward--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "i++", "i<list.length", "isSufficientlyStaked(list[i])", "rewards[list[i]]+=reward", "total+=reward", "isSufficientlyStaked(list[i])", "rewards[list[i]]+=reward", "total+=reward"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Expression", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "AssignmentOperation_+=", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [2], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "reward--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "i<list.length", "isSufficientlyStaked(list[i])", "rewards[list[i]]+=reward", "total+=reward"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [3, 8], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "TMP_621--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "total=0", "i++", "i<list.length", "isSufficientlyStaked(list[i])", "rewards[list[i]]+=reward", "total+=reward", "Reward(list[i],reward)", "total<amount", "isSufficientlyStaked(list[0])", "rewards[list[0]]+=total-amount"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_+=", "CallExpression", "Condition", "Condition", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [3, 3], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "TMP_621--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "total=0", "not(i<list.length)", "total<amount", "isSufficientlyStaked(list[0])", "rewards[list[0]]+=total-amount"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [3, 8], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "TMP_624--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "total=0", "i++", "i<list.length", "isSufficientlyStaked(list[i])", "rewards[list[i]]+=reward", "total+=reward", "Reward(list[i],reward)", "total<amount", "not(isSufficientlyStaked(list[0]))", "rewards[list[1]]+=total-amount"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_+=", "CallExpression", "Condition", "Condition", "AssignmentOperation_+="]}, {"isloop": true, "loop_info": [3, 3], "modifier": [], "vars": {"amount": "uint256", "i": "uint256", "list": "address[]", "num": "uint256", "reward": "uint256", "rewards": "mapping(address => uint256)", "total": "uint256"}, "info": ["MVM_Verifier", "distributeReward", "Reward", ["list_element--variables", "TMP_624--variables"]], "related_expression": ["reward=amount/num", "not(reward==0)", "total=0", "not(i<list.length)", "total<amount", "not(isSufficientlyStaked(list[0]))", "rewards[list[1]]+=total-amount"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_+="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"numQualifiedVerifiers": "uint256", "stake": "uint256", "target": "address", "verifier_stakes": "mapping(address => uint256)"}, "info": ["MVM_Verifier", "penalize", "Penalize", ["target--variables", "stake--variables"]], "related_expression": ["stake=verifier_stakes[target]", "verifier_stakes[target]=0", "deleteVerifier(target)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "CallExpression"]}]