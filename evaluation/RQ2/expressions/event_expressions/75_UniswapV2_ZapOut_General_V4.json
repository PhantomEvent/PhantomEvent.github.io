[{"isloop": false, "loop_info": [], "modifier": [], "vars": {"msgSender": "address", "_owner": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "constructor", "OwnershipTransferred", ["TMP_84--variables", "msgSender--variables"]], "related_expression": ["msgSender=_msgSender()", "_owner=msgSender"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "renounceOwnership", "OwnershipTransferred", ["_owner--variables", "TMP_86--variables"]], "related_expression": [], "related_expression_type": []}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address", "newOwner": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "transferOwnership", "OwnershipTransferred", ["_owner--variables", "newOwner--variables"]], "related_expression": ["newOwner!=address(0)"], "related_expression_type": ["Condition"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token0--variables", "amountA--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "token0==wethTokenAddress||token1==wethTokenAddress", "token0==wethTokenAddress", "_token=token1", "(amountA,amountB)=uniswapV2Router.removeLiquidityETH(_token,incomingLP,1,1,address(this),deadline)", "tokenGoodwill=_subtractGoodwill(_token,amountA,affiliate,true)", "IERC20(_token).safeTransfer(msg.sender,amountA-tokenGoodwill)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token0--variables", "amountA--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "token0==wethTokenAddress||token1==wethTokenAddress", "not(token0==wethTokenAddress)", "_token=token0", "(amountA,amountB)=uniswapV2Router.removeLiquidityETH(_token,incomingLP,1,1,address(this),deadline)", "tokenGoodwill=_subtractGoodwill(_token,amountA,affiliate,true)", "IERC20(_token).safeTransfer(msg.sender,amountA-tokenGoodwill)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token0--variables", "amountA--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "not(token0==wethTokenAddress||token1==wethTokenAddress)", "(amountA,amountB)=uniswapV2Router.removeLiquidity(token0,token1,incomingLP,1,1,address(this),deadline)", "tokenAGoodwill=_subtractGoodwill(token0,amountA,affiliate,true)", "tokenBGoodwill=_subtractGoodwill(token1,amountB,affiliate,true)", "IERC20(token0).safeTransfer(msg.sender,amountA-tokenAGoodwill)", "IERC20(token1).safeTransfer(msg.sender,amountB-tokenBGoodwill)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token1--variables", "amountB--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "token0==wethTokenAddress||token1==wethTokenAddress", "token0==wethTokenAddress", "_token=token1", "(amountA,amountB)=uniswapV2Router.removeLiquidityETH(_token,incomingLP,1,1,address(this),deadline)", "tokenGoodwill=_subtractGoodwill(_token,amountA,affiliate,true)", "ethGoodwill=_subtractGoodwill(ETHAddress,amountB,affiliate,true)", "IERC20(_token).safeTransfer(msg.sender,amountA-tokenGoodwill)", "Address.sendValue(address(msg.sender),amountB-ethGoodwill)", "zapOut(msg.sender,fromPoolAddress,token0,amountA)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token1--variables", "amountB--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "token0==wethTokenAddress||token1==wethTokenAddress", "not(token0==wethTokenAddress)", "_token=token0", "(amountA,amountB)=uniswapV2Router.removeLiquidityETH(_token,incomingLP,1,1,address(this),deadline)", "tokenGoodwill=_subtractGoodwill(_token,amountA,affiliate,true)", "ethGoodwill=_subtractGoodwill(ETHAddress,amountB,affiliate,true)", "IERC20(_token).safeTransfer(msg.sender,amountA-tokenGoodwill)", "Address.sendValue(address(msg.sender),amountB-ethGoodwill)", "zapOut(msg.sender,fromPoolAddress,token0,amountA)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "_token": "address", "affiliate": "address", "amountA": "uint256", "amountB": "uint256", "deadline": "uint256", "ethGoodwill": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "msg.sender": "address", "pair": "IUniswapV2Pair", "this": "address", "token0": "address", "token1": "address", "tokenAGoodwill": "uint256", "tokenBGoodwill": "uint256", "tokenGoodwill": "uint256", "uniswapV2Router": "IUniswapV2Router02", "wethTokenAddress": "address"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut2PairToken", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "token1--variables", "amountB--variables"]], "related_expression": ["pair=IUniswapV2Pair(fromPoolAddress)", "address(pair)!=address(0)", "token0=pair.token0()", "token1=pair.token1()", "IERC20(fromPoolAddress).safeTransferFrom(msg.sender,address(this),incomingLP)", "_approveToken(fromPoolAddress,address(uniswapV2Router),incomingLP)", "not(token0==wethTokenAddress||token1==wethTokenAddress)", "(amountA,amountB)=uniswapV2Router.removeLiquidity(token0,token1,incomingLP,1,1,address(this),deadline)", "tokenAGoodwill=_subtractGoodwill(token0,amountA,affiliate,true)", "tokenBGoodwill=_subtractGoodwill(token1,amountB,affiliate,true)", "IERC20(token0).safeTransfer(msg.sender,amountA-tokenAGoodwill)", "IERC20(token1).safeTransfer(msg.sender,amountB-tokenBGoodwill)", "zapOut(msg.sender,fromPoolAddress,token0,amountA)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "CallExpression", "CallExpression"]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount0": "uint256", "amount1": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "minTokensRec": "uint256", "msg.sender": "address", "shouldSellEntireBalance": "bool", "swapData": "bytes[]", "swapTargets": "address[]", "toTokenAddress": "address", "tokensRec": "uint256", "totalGoodwillPortion": "uint256"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "toTokenAddress--variables", "tokensRec--variables"]], "related_expression": ["(amount0,amount1)=_removeLiquidity(fromPoolAddress,incomingLP,shouldSellEntireBalance)", "tokensRec=_swapTokens(fromPoolAddress,amount0,amount1,toTokenAddress,swapTargets,swapData)", "tokensRec>=minTokensRec", "toTokenAddress==address(0)", "totalGoodwillPortion=_subtractGoodwill(ETHAddress,tokensRec,affiliate,true)", "address(msg.sender).transfer(tokensRec-totalGoodwillPortion)", "tokensRec=tokensRec-totalGoodwillPortion"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["stopInEmergency"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount0": "uint256", "amount1": "uint256", "fromPoolAddress": "address", "incomingLP": "uint256", "minTokensRec": "uint256", "msg.sender": "address", "shouldSellEntireBalance": "bool", "swapData": "bytes[]", "swapTargets": "address[]", "toTokenAddress": "address", "tokensRec": "uint256", "totalGoodwillPortion": "uint256"}, "info": ["UniswapV2_ZapOut_General_V4_0_1", "ZapOut", "zapOut", ["msg.sender--variables", "fromPoolAddress--variables", "toTokenAddress--variables", "tokensRec--variables"]], "related_expression": ["(amount0,amount1)=_removeLiquidity(fromPoolAddress,incomingLP,shouldSellEntireBalance)", "tokensRec=_swapTokens(fromPoolAddress,amount0,amount1,toTokenAddress,swapTargets,swapData)", "tokensRec>=minTokensRec", "not(toTokenAddress==address(0))", "totalGoodwillPortion=_subtractGoodwill(toTokenAddress,tokensRec,affiliate,true)", "IERC20(toTokenAddress).safeTransfer(msg.sender,tokensRec-totalGoodwillPortion)", "tokensRec=tokensRec-totalGoodwillPortion"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"msgSender": "address", "_owner": "address"}, "info": ["ZapBaseV2", "constructor", "OwnershipTransferred", ["TMP_226--variables", "msgSender--variables"]], "related_expression": ["msgSender=_msgSender()", "_owner=msgSender"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address"}, "info": ["ZapBaseV2", "renounceOwnership", "OwnershipTransferred", ["_owner--variables", "TMP_228--variables"]], "related_expression": [], "related_expression_type": []}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address", "newOwner": "address"}, "info": ["ZapBaseV2", "transferOwnership", "OwnershipTransferred", ["_owner--variables", "newOwner--variables"]], "related_expression": ["newOwner!=address(0)"], "related_expression_type": ["Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"msgSender": "address", "_owner": "address"}, "info": ["ZapOutBaseV3", "constructor", "OwnershipTransferred", ["TMP_367--variables", "msgSender--variables"]], "related_expression": ["msgSender=_msgSender()", "_owner=msgSender"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address"}, "info": ["ZapOutBaseV3", "renounceOwnership", "OwnershipTransferred", ["_owner--variables", "TMP_369--variables"]], "related_expression": [], "related_expression_type": []}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address", "newOwner": "address"}, "info": ["ZapOutBaseV3", "transferOwnership", "OwnershipTransferred", ["_owner--variables", "newOwner--variables"]], "related_expression": ["newOwner!=address(0)"], "related_expression_type": ["Condition"]}, {"isloop": false, "loop_info": [], "modifier": [], "vars": {"msgSender": "address", "_owner": "address"}, "info": ["Ownable", "constructor", "OwnershipTransferred", ["TMP_405--variables", "msgSender--variables"]], "related_expression": ["msgSender=_msgSender()", "_owner=msgSender"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address"}, "info": ["Ownable", "renounceOwnership", "OwnershipTransferred", ["_owner--variables", "TMP_407--variables"]], "related_expression": [], "related_expression_type": []}, {"isloop": false, "loop_info": [], "modifier": ["onlyOwner"], "vars": {"_owner": "address", "newOwner": "address"}, "info": ["Ownable", "transferOwnership", "OwnershipTransferred", ["_owner--variables", "newOwner--variables"]], "related_expression": ["newOwner!=address(0)"], "related_expression_type": ["Condition"]}]