[{"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_paused"], "info": ["L1CrossDomainMessenger", "paused"], "vars": {"_paused": "bool"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["L1CrossDomainMessenger", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["L1CrossDomainMessenger", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["L1CrossDomainMessenger", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["libAddressManager.getAddress(_name)"], "info": ["L1CrossDomainMessenger", "resolve", "_name"], "vars": {"_name": "string", "libAddressManager": "Lib_AddressManager"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["xDomainMsgSender"], "info": ["L1CrossDomainMessenger", "xDomainMessageSender"], "vars": {"xDomainMsgSender": "address"}, "loop_info": [], "related_expression": ["xDomainMsgSender!=Lib_DefaultValues.DEFAULT_XDOMAIN_SENDER"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_xDomainCalldata--variables", "_proof--variables"], "modifier": [], "return_expressions": ["(_verifyStateRootProof(_proof)&&_verifyStorageProof(_xDomainCalldata,_proof))"], "info": ["L1CrossDomainMessenger", "_verifyXDomainMessage", "_xDomainCalldata", "_proof"], "vars": {"_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "_xDomainCalldata": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_proof--variables", "ovmStateCommitmentChain--variables"], "modifier": [], "return_expressions": ["(ovmStateCommitmentChain.insideFraudProofWindow(_proof.stateRootBatchHeader)==false&&ovmStateCommitmentChain.verifyStateCommitment(_proof.stateRoot,_proof.stateRootBatchHeader,_proof.stateRootProof))"], "info": ["L1CrossDomainMessenger", "_verifyStateRootProof", "_proof"], "vars": {"_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "ovmStateCommitmentChain": "IStateCommitmentChain"}, "loop_info": [], "related_expression": ["ovmStateCommitmentChain=IStateCommitmentChain(resolve(StateCommitmentChain))"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_proof--variables", "account--variables", "storageKey--variables"], "modifier": [], "return_expressions": ["Lib_SecureMerkleTrie.verifyInclusionProof(abi.encodePacked(storageKey),abi.encodePacked(uint8(1)),_proof.storageTrieWitness,account.storageRoot)"], "info": ["L1CrossDomainMessenger", "_verifyStorageProof", "_xDomainCalldata", "_proof"], "vars": {"_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "_xDomainCalldata": "bytes", "account": "Lib_OVMCodec.EVMAccount", "encodedMessagePassingAccount": "bytes", "exists": "bool", "storageKey": "bytes32"}, "loop_info": [], "related_expression": ["storageKey=keccak256(bytes)(abi.encodePacked(keccak256(bytes)(abi.encodePacked(_xDomainCalldata,Lib_PredeployAddresses.L2_CROSS_DOMAIN_MESSENGER)),uint256(0)))", "(exists,encodedMessagePassingAccount)=Lib_SecureMerkleTrie.get(abi.encodePacked(Lib_PredeployAddresses.L2_TO_L1_MESSAGE_PASSER),_proof.stateTrieWitness,_proof.stateRoot)", "exists==true", "account=Lib_OVMCodec.decodeEVMAccount(encodedMessagePassingAccount)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_proof--variables", "_xDomainCalldata--variables", "_chainId--variables"], "modifier": [], "return_expressions": ["(_verifyStateRootProofByChainId(_chainId,_proof)&&_verifyStorageProofByChainId(_chainId,_xDomainCalldata,_proof))"], "info": ["L1CrossDomainMessenger", "_verifyXDomainMessageByChainId", "_chainId", "_xDomainCalldata", "_proof"], "vars": {"_chainId": "uint256", "_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "_xDomainCalldata": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_proof--variables", "_chainId--variables", "ovmStateCommitmentChain--variables"], "modifier": [], "return_expressions": ["(ovmStateCommitmentChain.insideFraudProofWindowByChainId(_chainId,_proof.stateRootBatchHeader)==false&&ovmStateCommitmentChain.verifyStateCommitmentByChainId(_chainId,_proof.stateRoot,_proof.stateRootBatchHeader,_proof.stateRootProof))"], "info": ["L1CrossDomainMessenger", "_verifyStateRootProofByChainId", "_chainId", "_proof"], "vars": {"_chainId": "uint256", "_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "ovmStateCommitmentChain": "IStateCommitmentChain"}, "loop_info": [], "related_expression": ["ovmStateCommitmentChain=IStateCommitmentChain(resolve(StateCommitmentChain))"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["storageKey--variables", "_proof--variables", "account--variables"], "modifier": [], "return_expressions": ["Lib_SecureMerkleTrie.verifyInclusionProof(abi.encodePacked(storageKey),abi.encodePacked(uint8(1)),_proof.storageTrieWitness,account.storageRoot)"], "info": ["L1CrossDomainMessenger", "_verifyStorageProofByChainId", "_chainId", "_xDomainCalldata", "_proof"], "vars": {"_proof": "IL1CrossDomainMessenger.L2MessageInclusionProof", "_xDomainCalldata": "bytes", "account": "Lib_OVMCodec.EVMAccount", "encodedMessagePassingAccount": "bytes", "exists": "bool", "storageKey": "bytes32"}, "loop_info": [], "related_expression": ["storageKey=keccak256(bytes)(abi.encodePacked(keccak256(bytes)(abi.encodePacked(_xDomainCalldata,Lib_PredeployAddresses.L2_CROSS_DOMAIN_MESSENGER)),uint256(0)))", "(exists,encodedMessagePassingAccount)=Lib_SecureMerkleTrie.get(abi.encodePacked(Lib_PredeployAddresses.L2_TO_L1_MESSAGE_PASSER),_proof.stateTrieWitness,_proof.stateRoot)", "exists==true", "account=Lib_OVMCodec.decodeEVMAccount(encodedMessagePassingAccount)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_target--variables", "_sender--variables", "_message--variables", "_messageNonce--variables"], "modifier": [], "return_expressions": ["abi.encodeWithSignature(relayMessage(address,address,bytes,uint256),_target,_sender,_message,_messageNonce)"], "info": ["Lib_CrossDomainUtils", "encodeXDomainCalldata", "_target", "_sender", "_message", "_messageNonce"], "vars": {"_message": "bytes", "_messageNonce": "uint256", "_sender": "address", "_target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_message--variables", "_messageNonce--variables", "_target--variables", "_chainId--variables", "_sender--variables"], "modifier": [], "return_expressions": ["abi.encodeWithSignature(relayMessageViaChainId(uint256,address,address,bytes,uint256),_chainId,_target,_sender,_message,_messageNonce)"], "info": ["Lib_CrossDomainUtils", "encodeXDomainCalldataViaChainId", "_chainId", "_target", "_sender", "_message", "_messageNonce"], "vars": {"_chainId": "uint256", "_message": "bytes", "_messageNonce": "uint256", "_sender": "address", "_target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_transaction--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(_transaction.timestamp,_transaction.blockNumber,_transaction.l1QueueOrigin,_transaction.l1TxOrigin,_transaction.entrypoint,_transaction.gasLimit,_transaction.data)"], "info": ["Lib_OVMCodec", "encodeTransaction", "_transaction"], "vars": {"_transaction": "Lib_OVMCodec.Transaction"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_transaction--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(encodeTransaction(_transaction))"], "info": ["Lib_OVMCodec", "hashTransaction", "_transaction"], "vars": {"_transaction": "Lib_OVMCodec.Transaction"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["accountState--variables"], "modifier": [], "return_expressions": ["EVMAccount({nonce:Lib_RLPReader.readUint256(accountState[0]),balance:Lib_RLPReader.readUint256(accountState[1]),storageRoot:Lib_RLPReader.readBytes32(accountState[2]),codeHash:Lib_RLPReader.readBytes32(accountState[3])})"], "info": ["Lib_OVMCodec", "decodeEVMAccount", "_encoded"], "vars": {"_encoded": "bytes", "accountState": "Lib_RLPReader.RLPItem[]"}, "loop_info": [], "related_expression": ["accountState=Lib_RLPReader.readList(_encoded)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_batchHeader--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(abi.encode(_batchHeader.batchRoot,_batchHeader.batchSize,_batchHeader.prevTotalElements,_batchHeader.extraData))"], "info": ["Lib_OVMCodec", "hashBatchHeader", "_batchHeader"], "vars": {"_batchHeader": "Lib_OVMCodec.ChainBatchHeader"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Lib_AddressManager", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Lib_AddressManager", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Lib_AddressManager", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "external", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["addresses[_getNameHash(_name)]"], "info": ["Lib_AddressManager", "getAddress", "_name"], "vars": {"_name": "string", "addresses": "mapping(bytes32 => address)"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(abi.encodePacked(_name))"], "info": ["Lib_AddressManager", "_getNameHash", "_name"], "vars": {"_name": "string"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["libAddressManager.getAddress(_name)"], "info": ["Lib_AddressResolver", "resolve", "_name"], "vars": {"_name": "string", "libAddressManager": "Lib_AddressManager"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["ptr--variables", "_in--variables"], "modifier": [], "return_expressions": ["RLPItem({length:_in.length,ptr:ptr})"], "info": ["Lib_RLPReader", "toRLPItem", "_in"], "vars": {"_in": "bytes", "ptr": "uint256"}, "loop_info": [], "related_expression": ["ptr=_in+32"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"MAX_LIST_LENGTH": "uint256", "_in": "Lib_RLPReader.RLPItem", "itemCount": "uint256", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "listOffset": "uint256", "offset": "uint256", "out": "Lib_RLPReader.RLPItem[]"}, "loop_info": [5, 10], "related_expression": ["(listOffset,itemType)=_decodeLength(_in)", "itemType==RLPItemType.LIST_ITEM", "out=newLib_RLPReader.RLPItem[](MAX_LIST_LENGTH)", "itemCount=0", "offset=listOffset", "(itemOffset,itemLength)=_decodeLength(RLPItem({length:_in.length-offset,ptr:_in.ptr+offset}))", "out[itemCount]=RLPItem({length:itemLength+itemOffset,ptr:_in.ptr+offset})", "itemCount+=1", "offset+=itemOffset+itemLength", "offset<_in.length", "itemCount<MAX_LIST_LENGTH", "mstore(uint256,uint256)(out,itemCount)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"MAX_LIST_LENGTH": "uint256", "_in": "Lib_RLPReader.RLPItem", "itemCount": "uint256", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "listOffset": "uint256", "offset": "uint256", "out": "Lib_RLPReader.RLPItem[]"}, "loop_info": [5, 5], "related_expression": ["(listOffset,itemType)=_decodeLength(_in)", "itemType==RLPItemType.LIST_ITEM", "out=newLib_RLPReader.RLPItem[](MAX_LIST_LENGTH)", "itemCount=0", "offset=listOffset", "not(offset<_in.length)", "mstore(uint256,uint256)(out,itemCount)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readList(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["itemOffset--variables", "itemLength--variables", "_in--variables"], "modifier": [], "return_expressions": ["_copy(_in.ptr,itemOffset,itemLength)"], "info": ["Lib_RLPReader", "readBytes", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType"}, "loop_info": [], "related_expression": ["itemType==RLPItemType.DATA_ITEM"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBytes(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBytes", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["string(readBytes(_in))"], "info": ["Lib_RLPReader", "readString", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readString(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readString", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "out": "bytes32", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length<=33", "(itemOffset,itemLength,itemType)=_decodeLength(_in)", "itemType==RLPItemType.DATA_ITEM", "ptr=_in.ptr+itemOffset", "out=mload(uint256)(ptr)", "itemLength<32", "out=out/256**32-itemLength"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "out": "bytes32", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length<=33", "(itemOffset,itemLength,itemType)=_decodeLength(_in)", "itemType==RLPItemType.DATA_ITEM", "ptr=_in.ptr+itemOffset", "out=mload(uint256)(ptr)", "not(itemLength<32)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBytes32(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["uint256(readBytes32(_in))"], "info": ["Lib_RLPReader", "readUint256", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readUint256(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readUint256", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out!=0"], "info": ["Lib_RLPReader", "readBool", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "out": "uint256", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length==1", "ptr=_in.ptr", "out=byte(uint256,uint256)(0,mload(uint256)(ptr))", "out==0||out==1"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBool(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBool", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["address(0)"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": ["_in.length==1"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["address(uint160(readUint256(_in)))"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": ["not(_in.length==1)", "_in.length==21"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readAddress(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_copy(_in)"], "info": ["Lib_RLPReader", "readRawBytes", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["(0,1,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "prefix<=0x7f"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["strLen--variables"], "modifier": [], "return_expressions": ["(1,strLen,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "prefix<=0xb7", "strLen=prefix-0x80", "_in.length>strLen"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["lenOfStrLen--variables", "strLen_scope_0--variables"], "modifier": [], "return_expressions": ["(1+lenOfStrLen,strLen_scope_0,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "prefix<=0xbf", "lenOfStrLen=prefix-0xb7", "_in.length>lenOfStrLen", "strLen=mload(uint256)(ptr+1)/256**32-lenOfStrLen", "_in.length>lenOfStrLen+strLen_scope_0"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["listLen--variables"], "modifier": [], "return_expressions": ["(1,listLen,RLPItemType.LIST_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "not(prefix<=0xbf)", "prefix<=0xf7", "listLen=prefix-0xc0", "_in.length>listLen"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["listLen_scope_1--variables", "lenOfListLen--variables"], "modifier": [], "return_expressions": ["(1+lenOfListLen,listLen_scope_1,RLPItemType.LIST_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "not(prefix<=0xbf)", "not(prefix<=0xf7)", "lenOfListLen=prefix-0xf7", "_in.length>lenOfListLen", "listLen=mload(uint256)(ptr+1)/256**32-lenOfListLen", "_in.length>lenOfListLen+listLen_scope_1"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [], "related_expression": ["out=newbytes(_length)", "out.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [5, 9], "related_expression": ["out=newbytes(_length)", "not(out.length==0)", "src=_src+_offset", "dest=out+32", "i=0", "src+=32", "dest+=32", "i++", "i<_length/32", "mstore(uint256,uint256)(dest,mload(uint256)(src))", "mask=256**(32-(_length%32))-1", "mstore(uint256,uint256)(dest,mload(uint256)(src)&~mask|mload(uint256)(dest)&mask)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Expression", "Condition", "CallExpression", "AssignmentOperation_=", "CallExpression"], "isloop": true}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [5, 5], "related_expression": ["out=newbytes(_length)", "not(out.length==0)", "src=_src+_offset", "dest=out+32", "i=0", "not(i<_length/32)", "mask=256**(32-(_length%32))-1", "mstore(uint256,uint256)(dest,mload(uint256)(src)&~mask|mload(uint256)(dest)&mask)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression"], "isloop": true}, {"visibility": "private", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_copy(_in.ptr,0,_in.length)"], "info": ["Lib_RLPReader", "_copy", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBytes", "_in"], "vars": {"_in": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["_in.length==1&&uint8(_in[0])<128", "encoded=_in"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBytes", "_in"], "vars": {"_in": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["not(_in.length==1&&uint8(_in[0])<128)", "encoded=abi.encodePacked(_writeLength(_in.length,128),_in)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["list--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(_writeLength(list.length,192),list)"], "info": ["Lib_RLPWriter", "writeList", "_in"], "vars": {"_in": "bytes[]", "list": "bytes"}, "loop_info": [], "related_expression": ["list=_flatten(_in)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(bytes(_in))"], "info": ["Lib_RLPWriter", "writeString", "_in"], "vars": {"_in": "string"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(abi.encodePacked(_in))"], "info": ["Lib_RLPWriter", "writeAddress", "_in"], "vars": {"_in": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(_toBinary(_in))"], "info": ["Lib_RLPWriter", "writeUint", "_in"], "vars": {"_in": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBool", "_in"], "vars": {"_in": "bool", "encoded": "bytes"}, "loop_info": [], "related_expression": ["encoded=newbytes(1)", "_in", "encoded[0]=bytes1(0x01)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBool", "_in"], "vars": {"_in": "bool", "encoded": "bytes"}, "loop_info": [], "related_expression": ["encoded=newbytes(1)", "not(_in)", "encoded[0]=bytes1(0x80)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [], "related_expression": ["_len<56", "encoded=newbytes(1)", "encoded[0]=bytes1(uint8(_len)+uint8(_offset))"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 4, 8, 8], "related_expression": ["not(_len<56)", "i=1", "lenLen++", "i*=256", "_len/i!=0", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "not(i<=lenLen)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Expression", "AssignmentOperation_*=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 2, 6, 8], "related_expression": ["not(_len<56)", "i=1", "not(_len/i!=0)", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "encoded[i]=bytes1(uint8((_len/(256**(lenLen-i)))%256))", "i++", "i<=lenLen"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 2, 6, 6], "related_expression": ["not(_len<56)", "i=1", "not(_len/i!=0)", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "not(i<=lenLen)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 5, 8, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i++", "i<32", "b[i]!=0", "b[i]!=0", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 5, 8, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "i++", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 3, 6, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "j<res.length", "res[j]=b[i++]", "j++"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 3, 6, 6], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 4, 7, 7], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i++", "i<32", "not(b[i]!=0)", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 2, 5, 7], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "not(i<32)", "res=newbytes(32-i)", "j=0", "j<res.length", "res[j]=b[i++]", "j++"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 2, 5, 5], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "not(i<32)", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["newbytes(0)"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [], "related_expression": ["_list.length==0"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 4, 8, 8], "related_expression": ["not(_list.length==0)", "i=0", "len+=_list[i].length", "i++", "i<_list.length", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "not(i<_list.length)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 2, 6, 10], "related_expression": ["not(_list.length==0)", "i=0", "not(i<_list.length)", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "_memcpy(flattenedPtr,listPtr,item.length)", "flattenedPtr+=_list[i].length", "i++", "i<_list.length", "item=_list[i]"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_+=", "Expression", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 2, 6, 6], "related_expression": ["not(_list.length==0)", "i=0", "not(i<_list.length)", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "not(i<_list.length)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["value--variables", "_value--variables", "exists--variables"], "modifier": [], "return_expressions": ["(exists&&Lib_BytesUtils.equal(_value,value))"], "info": ["Lib_MerkleTrie", "verifyInclusionProof", "_key", "_value", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "_value": "bytes", "exists": "bool", "value": "bytes"}, "loop_info": [], "related_expression": ["(exists,value)=get(_key,_proof,_root)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_value--variables", "_key--variables"], "modifier": [], "return_expressions": ["getSingleNodeRootHash(_key,_value)"], "info": ["Lib_MerkleTrie", "update", "_key", "_value", "_proof", "_root"], "vars": {"KECCAK256_RLP_NULL_BYTES": "bytes32", "_key": "bytes", "_proof": "bytes", "_root": "bytes32", "_value": "bytes", "keyRemainder": "bytes", "newPath": "Lib_MerkleTrie.TrieNode[]", "pathLength": "uint256", "proof": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [], "related_expression": ["_root==KECCAK256_RLP_NULL_BYTES"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_key--variables", "newPath--variables"], "modifier": [], "return_expressions": ["_getUpdatedTrieRoot(newPath,_key)"], "info": ["Lib_MerkleTrie", "update", "_key", "_value", "_proof", "_root"], "vars": {"KECCAK256_RLP_NULL_BYTES": "bytes32", "_key": "bytes", "_proof": "bytes", "_root": "bytes32", "_value": "bytes", "keyRemainder": "bytes", "newPath": "Lib_MerkleTrie.TrieNode[]", "pathLength": "uint256", "proof": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [], "related_expression": ["not(_root==KECCAK256_RLP_NULL_BYTES)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["value--variables", "exists--variables"], "modifier": [], "return_expressions": ["(exists,value)"], "info": ["Lib_MerkleTrie", "get", "_key", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "exists": "bool", "isFinalNode": "bool", "keyRemainder": "bytes", "pathLength": "uint256", "proof": "Lib_MerkleTrie.TrieNode[]", "value": "bytes"}, "loop_info": [], "related_expression": ["(pathLength,keyRemainder,isFinalNode)=_walkNodePath(proof,_key,_root)", "exists=keyRemainder.length==0", "exists||isFinalNode", "exists", "value=_getNodeValue(proof[pathLength-1])"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["value--variables", "exists--variables"], "modifier": [], "return_expressions": ["(exists,value)"], "info": ["Lib_MerkleTrie", "get", "_key", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "exists": "bool", "isFinalNode": "bool", "keyRemainder": "bytes", "pathLength": "uint256", "proof": "Lib_MerkleTrie.TrieNode[]", "value": "bytes"}, "loop_info": [], "related_expression": ["(pathLength,keyRemainder,isFinalNode)=_walkNodePath(proof,_key,_root)", "exists=keyRemainder.length==0", "exists||isFinalNode", "not(exists)", "value=bytes()"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_value--variables", "_key--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(_makeLeafNode(Lib_BytesUtils.toNibbles(_key),_value).encoded)"], "info": ["Lib_MerkleTrie", "getSingleNodeRootHash", "_key", "_value"], "vars": {"TMP_425": "Lib_MerkleTrie.TrieNode", "_key": "bytes", "_value": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 18, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 13], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 18, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 26, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 33, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 23], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 33], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 33], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 18, 33], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 26, 40], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 33, 40], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 22], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 18, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 26, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 33, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 35, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 23], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 26], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 20, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 14], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 36], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 23], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 36], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 35, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 36, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 26], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 20, 25], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 14], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentKeyIndex==key.length", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 36], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength", "currentKeyIndex+=sharedNibbleLength", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 34], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 41], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(sharedNibbleLength!=pathRemainder.length)", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 23], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD", "not(pathRemainder.length==sharedNibbleLength&&keyRemainder.length==sharedNibbleLength)", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 16, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 17, 36], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "currentNode.encoded.length>=32", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 19, 35], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 27, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 34, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 35, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 36, 42], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=_getNodeID(currentNode.decoded[1])", "currentKeyIncrement=sharedNibbleLength", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 24], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "not(currentKeyIndex==0)", "not(currentNode.encoded.length>=32)", "Lib_BytesUtils.toBytes32(currentNode.encoded)==currentNodeID", "not(currentNode.decoded.length==BRANCH_NODE_LENGTH)", "currentNode.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "path=_getNodePath(currentNode)", "prefix=uint8(path[0])", "offset=2-(prefix%2)", "pathRemainder=Lib_BytesUtils.slice(path,offset)", "keyRemainder=Lib_BytesUtils.slice(key,currentKeyIndex)", "sharedNibbleLength=_getSharedNibbleLength(pathRemainder,keyRemainder)", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD", "sharedNibbleLength!=pathRemainder.length", "currentNodeID=bytes32(RLP_NULL)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 12, 17], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "currentNode.decoded.length==BRANCH_NODE_LENGTH", "not(currentKeyIndex==key.length)", "branchKey=uint8(key[currentKeyIndex])", "nextNode=currentNode.decoded[branchKey]", "currentNodeID=_getNodeID(nextNode)", "currentKeyIncrement=1", "i<_proof.length", "currentNode=_proof[i]", "currentKeyIndex+=currentKeyIncrement", "pathLength+=1", "currentKeyIndex==0", "keccak256(bytes)(currentNode.encoded)==currentNodeID", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["isFinalNode--variables", "currentKeyIndex--variables", "pathLength--variables", "key--variables"], "modifier": [], "return_expressions": ["(pathLength,Lib_BytesUtils.slice(key,currentKeyIndex),isFinalNode)"], "info": ["Lib_MerkleTrie", "_walkNodePath", "_proof", "_key", "_root"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "RLP_NULL": "bytes1", "_key": "bytes", "_proof": "Lib_MerkleTrie.TrieNode[]", "_root": "bytes32", "branchKey": "uint8", "currentKeyIncrement": "uint256", "currentKeyIndex": "uint256", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeID": "bytes32", "i": "uint256", "isFinalNode": "bool", "key": "bytes", "keyRemainder": "bytes", "nextNode": "Lib_RLPReader.RLPItem", "offset": "uint8", "path": "bytes", "pathLength": "uint256", "pathRemainder": "bytes", "prefix": "uint8", "sharedNibbleLength": "uint256"}, "loop_info": [6, 6], "related_expression": ["pathLength=0", "key=Lib_BytesUtils.toNibbles(_key)", "currentNodeID=_root", "currentKeyIndex=0", "currentKeyIncrement=0", "i=0", "not(i<_proof.length)", "isFinalNode=currentNodeID==bytes32(RLP_NULL)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 7], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "l+=_getNodeKey(_path[i]).length", "i++", "i<_path.length-1", "not(_getNodeType(_path[i])==NodeType.BranchNode)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_+=", "Expression", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [4, 4], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "_path.length>0", "i=0", "not(i<_path.length-1)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "lastNodeType==NodeType.LeafNode", "not(_path.length>0)", "not(_getSharedNibbleLength(_getNodeKey(lastNode),Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key),l))==_getNodeKey(lastNode).length&&keyRemainder.length==0)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "matchLeaf"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "lastNodeType==NodeType.BranchNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "sharedNibbleLength!=0", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "lastNodeKey.length==0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "lastNodeType==NodeType.LeafNode", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "lastNodeKey.length!=0", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "keyRemainder.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["_path--variables", "newNodes--variables", "_pathLength--variables", "totalNewNodes--variables"], "modifier": [], "return_expressions": ["_joinNodeArrays(_path,_pathLength-1,newNodes,totalNewNodes)"], "info": ["Lib_MerkleTrie", "_getNewPath", "_path", "_pathLength", "_key", "_keyRemainder", "_value"], "vars": {"TMP_482": "bytes", "TMP_488": "bytes", "_key": "bytes", "_keyRemainder": "bytes", "_path": "Lib_MerkleTrie.TrieNode[]", "_pathLength": "uint256", "_value": "bytes", "branchKey": "uint8", "i": "uint256", "keyRemainder": "bytes", "l": "uint256", "lastNode": "Lib_MerkleTrie.TrieNode", "lastNodeKey": "bytes", "lastNodeType": "Lib_MerkleTrie.NodeType", "matchLeaf": "bool", "modifiedLastNode": "Lib_MerkleTrie.TrieNode", "modifiedLastNode_scope_0": "Lib_MerkleTrie.TrieNode", "newBranch": "Lib_MerkleTrie.TrieNode", "newNodes": "Lib_MerkleTrie.TrieNode[]", "nextNodeKey": "bytes", "sharedNibbleLength": "uint256", "totalNewNodes": "uint256"}, "loop_info": [], "related_expression": ["lastNode=_path[_pathLength-1]", "not(lastNodeType==NodeType.LeafNode)", "not(matchLeaf)", "not(lastNodeType==NodeType.BranchNode)", "not(sharedNibbleLength!=0)", "not(lastNodeKey.length==0)", "not(lastNodeType==NodeType.LeafNode)", "not(lastNodeKey.length!=0)", "not(keyRemainder.length==0)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["currentNode--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(currentNode.encoded)"], "info": ["Lib_MerkleTrie", "_getUpdatedTrieRoot", "_nodes", "_key"], "vars": {"_key": "bytes", "_nodes": "Lib_MerkleTrie.TrieNode[]", "branchKey": "uint8", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeType": "Lib_MerkleTrie.NodeType", "i": "uint256", "key": "bytes", "nodeKey": "bytes", "nodeKey_scope_0": "bytes", "previousNodeHash": "bytes"}, "loop_info": [1, 7], "related_expression": ["i=_nodes.length", "previousNodeHash=_getNodeHash(currentNode.encoded)", "i--", "i>0", "currentNode=_nodes[i-1]", "currentNodeType=_getNodeType(currentNode)", "currentNodeType==NodeType.LeafNode", "nodeKey=_getNodeKey(currentNode)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["currentNode--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(currentNode.encoded)"], "info": ["Lib_MerkleTrie", "_getUpdatedTrieRoot", "_nodes", "_key"], "vars": {"_key": "bytes", "_nodes": "Lib_MerkleTrie.TrieNode[]", "branchKey": "uint8", "currentNode": "Lib_MerkleTrie.TrieNode", "currentNodeType": "Lib_MerkleTrie.NodeType", "i": "uint256", "key": "bytes", "nodeKey": "bytes", "nodeKey_scope_0": "bytes", "previousNodeHash": "bytes"}, "loop_info": [1, 1], "related_expression": ["i=_nodes.length", "not(i>0)"], "related_expression_type": ["AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["proof--variables"], "modifier": [], "return_expressions": ["proof"], "info": ["Lib_MerkleTrie", "_parseProof", "_proof"], "vars": {"_proof": "bytes", "encoded": "bytes", "i": "uint256", "nodes": "Lib_RLPReader.RLPItem[]", "proof": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [3, 6], "related_expression": ["nodes=Lib_RLPReader.readList(_proof)", "proof=newLib_MerkleTrie.TrieNode[](nodes.length)", "i=0", "i<nodes.length", "encoded=Lib_RLPReader.readBytes(nodes[i])", "proof[i]=TrieNode({encoded:encoded,decoded:Lib_RLPReader.readList(encoded)})", "i++"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["proof--variables"], "modifier": [], "return_expressions": ["proof"], "info": ["Lib_MerkleTrie", "_parseProof", "_proof"], "vars": {"_proof": "bytes", "encoded": "bytes", "i": "uint256", "nodes": "Lib_RLPReader.RLPItem[]", "proof": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [3, 3], "related_expression": ["nodes=Lib_RLPReader.readList(_proof)", "proof=newLib_MerkleTrie.TrieNode[](nodes.length)", "i=0", "not(i<nodes.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["nodeID--variables"], "modifier": [], "return_expressions": ["Lib_BytesUtils.toBytes32(nodeID)"], "info": ["Lib_MerkleTrie", "_getNodeID", "_node"], "vars": {"_node": "Lib_RLPReader.RLPItem", "nodeID": "bytes"}, "loop_info": [], "related_expression": ["_node.length<32", "nodeID=Lib_RLPReader.readRawBytes(_node)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["nodeID--variables"], "modifier": [], "return_expressions": ["Lib_BytesUtils.toBytes32(nodeID)"], "info": ["Lib_MerkleTrie", "_getNodeID", "_node"], "vars": {"_node": "Lib_RLPReader.RLPItem", "nodeID": "bytes"}, "loop_info": [], "related_expression": ["not(_node.length<32)", "nodeID=Lib_RLPReader.readBytes(_node)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["_node--variables"], "modifier": [], "return_expressions": ["Lib_BytesUtils.toNibbles(Lib_RLPReader.readBytes(_node.decoded[0]))"], "info": ["Lib_MerkleTrie", "_getNodePath", "_node"], "vars": {"_node": "Lib_MerkleTrie.TrieNode"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["_node--variables"], "modifier": [], "return_expressions": ["_removeHexPrefix(_getNodePath(_node))"], "info": ["Lib_MerkleTrie", "_getNodeKey", "_node"], "vars": {"_node": "Lib_MerkleTrie.TrieNode"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["_node--variables"], "modifier": [], "return_expressions": ["Lib_RLPReader.readBytes(_node.decoded[_node.decoded.length-1])"], "info": ["Lib_MerkleTrie", "_getNodeValue", "_node"], "vars": {"_node": "Lib_MerkleTrie.TrieNode"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["_encoded--variables"], "modifier": [], "return_expressions": ["_encoded"], "info": ["Lib_MerkleTrie", "_getNodeHash", "_encoded"], "vars": {"_encoded": "bytes"}, "loop_info": [], "related_expression": ["_encoded.length<32"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["_encoded--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(keccak256(bytes)(_encoded))"], "info": ["Lib_MerkleTrie", "_getNodeHash", "_encoded"], "vars": {"_encoded": "bytes"}, "loop_info": [], "related_expression": ["not(_encoded.length<32)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["NodeType.BranchNode"], "info": ["Lib_MerkleTrie", "_getNodeType", "_node"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "_node": "Lib_MerkleTrie.TrieNode", "path": "bytes", "prefix": "uint8"}, "loop_info": [], "related_expression": ["_node.decoded.length==BRANCH_NODE_LENGTH"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["NodeType.LeafNode"], "info": ["Lib_MerkleTrie", "_getNodeType", "_node"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "_node": "Lib_MerkleTrie.TrieNode", "path": "bytes", "prefix": "uint8"}, "loop_info": [], "related_expression": ["not(_node.decoded.length==BRANCH_NODE_LENGTH)", "_node.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD"], "related_expression_type": ["Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["NodeType.ExtensionNode"], "info": ["Lib_MerkleTrie", "_getNodeType", "_node"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "LEAF_OR_EXTENSION_NODE_LENGTH": "uint256", "PREFIX_EXTENSION_EVEN": "uint8", "PREFIX_EXTENSION_ODD": "uint8", "PREFIX_LEAF_EVEN": "uint8", "PREFIX_LEAF_ODD": "uint8", "_node": "Lib_MerkleTrie.TrieNode", "path": "bytes", "prefix": "uint8"}, "loop_info": [], "related_expression": ["not(_node.decoded.length==BRANCH_NODE_LENGTH)", "_node.decoded.length==LEAF_OR_EXTENSION_NODE_LENGTH", "not(prefix==PREFIX_LEAF_EVEN||prefix==PREFIX_LEAF_ODD)", "prefix==PREFIX_EXTENSION_EVEN||prefix==PREFIX_EXTENSION_ODD"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition"]}, {"visibility": "private", "return_vars": ["i--variables"], "modifier": [], "return_expressions": ["i"], "info": ["Lib_MerkleTrie", "_getSharedNibbleLength", "_a", "_b"], "vars": {"_a": "bytes", "_b": "bytes", "i": "uint256"}, "loop_info": [1, 2], "related_expression": ["i=0", "_a.length>i&&_b.length>i&&_a[i]==_b[i]", "i++"], "related_expression_type": ["AssignmentOperation_=", "Condition", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["i--variables"], "modifier": [], "return_expressions": ["i"], "info": ["Lib_MerkleTrie", "_getSharedNibbleLength", "_a", "_b"], "vars": {"_a": "bytes", "_b": "bytes", "i": "uint256"}, "loop_info": [1, 1], "related_expression": ["i=0", "not(_a.length>i&&_b.length>i&&_a[i]==_b[i])"], "related_expression_type": ["AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["TrieNode({encoded:encoded,decoded:Lib_RLPReader.readList(encoded)})"], "info": ["Lib_MerkleTrie", "_makeNode", "_raw"], "vars": {"_raw": "bytes[]", "encoded": "bytes"}, "loop_info": [], "related_expression": ["encoded=Lib_RLPWriter.writeList(_raw)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeNode", "_items"], "vars": {"_items": "Lib_RLPReader.RLPItem[]", "i": "uint256", "raw": "bytes[]"}, "loop_info": [2, 4], "related_expression": ["raw=newbytes[](_items.length)", "i=0", "i<_items.length", "raw[i]=Lib_RLPReader.readRawBytes(_items[i])", "i++"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeNode", "_items"], "vars": {"_items": "Lib_RLPReader.RLPItem[]", "i": "uint256", "raw": "bytes[]"}, "loop_info": [2, 2], "related_expression": ["raw=newbytes[](_items.length)", "i=0", "not(i<_items.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeExtensionNode", "_key", "_value"], "vars": {"_key": "bytes", "_value": "bytes", "key": "bytes", "raw": "bytes[]"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_editExtensionNodeValue", "_node", "_value"], "vars": {"_node": "Lib_MerkleTrie.TrieNode", "_value": "bytes", "key": "bytes", "raw": "bytes[]"}, "loop_info": [], "related_expression": ["_value.length<32"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_editExtensionNodeValue", "_node", "_value"], "vars": {"_node": "Lib_MerkleTrie.TrieNode", "_value": "bytes", "key": "bytes", "raw": "bytes[]"}, "loop_info": [], "related_expression": ["not(_value.length<32)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeLeafNode", "_key", "_value"], "vars": {"_key": "bytes", "_value": "bytes", "key": "bytes", "raw": "bytes[]"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeEmptyBranchNode"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "RLP_NULL_BYTES": "bytes", "i": "uint256", "raw": "bytes[]"}, "loop_info": [2, 4], "related_expression": ["raw=newbytes[](BRANCH_NODE_LENGTH)", "i=0", "i++", "i<raw.length", "raw[i]=RLP_NULL_BYTES"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["raw--variables"], "modifier": [], "return_expressions": ["_makeNode(raw)"], "info": ["Lib_MerkleTrie", "_makeEmptyBranchNode"], "vars": {"BRANCH_NODE_LENGTH": "uint256", "RLP_NULL_BYTES": "bytes", "i": "uint256", "raw": "bytes[]"}, "loop_info": [2, 2], "related_expression": ["raw=newbytes[](BRANCH_NODE_LENGTH)", "i=0", "not(i<raw.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["_branch--variables"], "modifier": [], "return_expressions": ["_makeNode(_branch.decoded)"], "info": ["Lib_MerkleTrie", "_editBranchValue", "_branch", "_value"], "vars": {"_branch": "Lib_MerkleTrie.TrieNode", "_value": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["_branch--variables"], "modifier": [], "return_expressions": ["_makeNode(_branch.decoded)"], "info": ["Lib_MerkleTrie", "_editBranchIndex", "_branch", "_index", "_value"], "vars": {"_branch": "Lib_MerkleTrie.TrieNode", "_index": "uint8", "_value": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["_value.length<32"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["_branch--variables"], "modifier": [], "return_expressions": ["_makeNode(_branch.decoded)"], "info": ["Lib_MerkleTrie", "_editBranchIndex", "_branch", "_index", "_value"], "vars": {"_branch": "Lib_MerkleTrie.TrieNode", "_index": "uint8", "_value": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["not(_value.length<32)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["prefixed--variables", "_key--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(prefixed,_key)"], "info": ["Lib_MerkleTrie", "_addHexPrefix", "_key", "_isLeaf"], "vars": {"_isLeaf": "bool", "_key": "bytes", "offset": "uint8", "prefix": "uint8", "prefixed": "bytes"}, "loop_info": [], "related_expression": ["_isLeaf", "prefix=uint8(0x02)", "offset=uint8(_key.length%2)", "prefixed=newbytes(2-offset)", "prefixed[0]=bytes1(prefix+offset)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["prefixed--variables", "_key--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(prefixed,_key)"], "info": ["Lib_MerkleTrie", "_addHexPrefix", "_key", "_isLeaf"], "vars": {"_isLeaf": "bool", "_key": "bytes", "offset": "uint8", "prefix": "uint8", "prefixed": "bytes"}, "loop_info": [], "related_expression": ["not(_isLeaf)", "prefix=uint8(0x00)", "offset=uint8(_key.length%2)", "prefixed=newbytes(2-offset)", "prefixed[0]=bytes1(prefix+offset)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["_path--variables"], "modifier": [], "return_expressions": ["Lib_BytesUtils.slice(_path,2)"], "info": ["Lib_MerkleTrie", "_removeHexPrefix", "_path"], "vars": {"_path": "bytes"}, "loop_info": [], "related_expression": ["uint8(_path[0])%2==0"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["_path--variables"], "modifier": [], "return_expressions": ["Lib_BytesUtils.slice(_path,1)"], "info": ["Lib_MerkleTrie", "_removeHexPrefix", "_path"], "vars": {"_path": "bytes"}, "loop_info": [], "related_expression": ["not(uint8(_path[0])%2==0)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_MerkleTrie", "_joinNodeArrays", "_a", "_aLength", "_b", "_bLength"], "vars": {"_a": "Lib_MerkleTrie.TrieNode[]", "_aLength": "uint256", "_b": "Lib_MerkleTrie.TrieNode[]", "_bLength": "uint256", "i": "uint256", "i_scope_0": "uint256", "ret": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [2, 4, 6, 6], "related_expression": ["ret=newLib_MerkleTrie.TrieNode[](_aLength+_bLength)", "i=0", "i++", "i<_aLength", "ret[i]=_a[i]", "i_scope_0=0", "not(i_scope_0<_bLength)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_MerkleTrie", "_joinNodeArrays", "_a", "_aLength", "_b", "_bLength"], "vars": {"_a": "Lib_MerkleTrie.TrieNode[]", "_aLength": "uint256", "_b": "Lib_MerkleTrie.TrieNode[]", "_bLength": "uint256", "i": "uint256", "i_scope_0": "uint256", "ret": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [2, 2, 4, 6], "related_expression": ["ret=newLib_MerkleTrie.TrieNode[](_aLength+_bLength)", "i=0", "not(i<_aLength)", "i_scope_0=0", "ret[i_scope_0+_aLength]=_b[i_scope_0]", "i_scope_0++", "i_scope_0<_bLength"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_MerkleTrie", "_joinNodeArrays", "_a", "_aLength", "_b", "_bLength"], "vars": {"_a": "Lib_MerkleTrie.TrieNode[]", "_aLength": "uint256", "_b": "Lib_MerkleTrie.TrieNode[]", "_bLength": "uint256", "i": "uint256", "i_scope_0": "uint256", "ret": "Lib_MerkleTrie.TrieNode[]"}, "loop_info": [2, 2, 4, 4], "related_expression": ["ret=newLib_MerkleTrie.TrieNode[](_aLength+_bLength)", "i=0", "not(i<_aLength)", "i_scope_0=0", "not(i_scope_0<_bLength)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["_value--variables", "_proof--variables", "_root--variables", "key--variables"], "modifier": [], "return_expressions": ["Lib_MerkleTrie.verifyInclusionProof(key,_value,_proof,_root)"], "info": ["Lib_SecureMerkleTrie", "verifyInclusionProof", "_key", "_value", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "_value": "bytes", "key": "bytes"}, "loop_info": [], "related_expression": ["key=_getSecureKey(_key)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_value--variables", "_proof--variables", "_root--variables", "key--variables"], "modifier": [], "return_expressions": ["Lib_MerkleTrie.update(key,_value,_proof,_root)"], "info": ["Lib_SecureMerkleTrie", "update", "_key", "_value", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "_value": "bytes", "key": "bytes"}, "loop_info": [], "related_expression": ["key=_getSecureKey(_key)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_proof--variables", "_root--variables", "key--variables"], "modifier": [], "return_expressions": ["Lib_MerkleTrie.get(key,_proof,_root)"], "info": ["Lib_SecureMerkleTrie", "get", "_key", "_proof", "_root"], "vars": {"_key": "bytes", "_proof": "bytes", "_root": "bytes32", "key": "bytes"}, "loop_info": [], "related_expression": ["key=_getSecureKey(_key)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_value--variables", "key--variables"], "modifier": [], "return_expressions": ["Lib_MerkleTrie.getSingleNodeRootHash(key,_value)"], "info": ["Lib_SecureMerkleTrie", "getSingleNodeRootHash", "_key", "_value"], "vars": {"_key": "bytes", "_value": "bytes", "key": "bytes"}, "loop_info": [], "related_expression": ["key=_getSecureKey(_key)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["_key--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(keccak256(bytes)(_key))"], "info": ["Lib_SecureMerkleTrie", "_getSecureKey", "_key"], "vars": {"_key": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_in!=0"], "info": ["Lib_Bytes32Utils", "toBool", "_in"], "vars": {"_in": "bytes32"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes32(uint256(1))"], "info": ["Lib_Bytes32Utils", "fromBool", "_in"], "vars": {"_in": "bool"}, "loop_info": [], "related_expression": ["_in"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes32(uint256(0))"], "info": ["Lib_Bytes32Utils", "fromBool", "_in"], "vars": {"_in": "bool"}, "loop_info": [], "related_expression": ["not(_in)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["address(uint160(uint256(_in)))"], "info": ["Lib_Bytes32Utils", "toAddress", "_in"], "vars": {"_in": "bytes32"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["bytes32(uint256(uint160(_in)))"], "info": ["Lib_Bytes32Utils", "fromAddress", "_in"], "vars": {"_in": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_604_2398_18_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [7, 9], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "switch_expr_604_2398_18_slice_asm_0==0", "tempBytes=mload(uint256)(0x40)", "mc_slice_asm_0=tempBytes+lengthmod_slice_asm_0+0x20*!lengthmod_slice_asm_0", "end_slice_asm_0=mc_slice_asm_0+_length", "mstore(uint256,uint256)(mc_slice_asm_0,mload(uint256)(cc_slice_asm_0))", "mc_slice_asm_0=mc_slice_asm_0+0x20", "mc_slice_asm_0<end_slice_asm_0", "mstore(uint256,uint256)(tempBytes,_length)", "mstore(uint256,uint256)(0x40,mc_slice_asm_0+31&~31)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_=", "Condition", "CallExpression", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_604_2398_18_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [7, 7], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "switch_expr_604_2398_18_slice_asm_0==0", "tempBytes=mload(uint256)(0x40)", "mc_slice_asm_0=tempBytes+lengthmod_slice_asm_0+0x20*!lengthmod_slice_asm_0", "end_slice_asm_0=mc_slice_asm_0+_length", "mc_slice_asm_0<end_slice_asm_0", "mstore(uint256,uint256)(tempBytes,_length)", "mstore(uint256,uint256)(0x40,mc_slice_asm_0+31&~31)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "CallExpression", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_604_2398_18_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "not(switch_expr_604_2398_18_slice_asm_0==0)", "tempBytes=mload(uint256)(0x40)", "mstore(uint256,uint256)(tempBytes,0)", "mstore(uint256,uint256)(0x40,tempBytes+0x20)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes()"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start"], "vars": {"_bytes": "bytes", "_start": "uint256"}, "loop_info": [], "related_expression": ["_start>=_bytes.length"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_start--variables", "_bytes--variables"], "modifier": [], "return_expressions": ["slice(_bytes,_start,_bytes.length-_start)"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start"], "vars": {"_bytes": "bytes", "_start": "uint256"}, "loop_info": [], "related_expression": ["not(_start>=_bytes.length)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "toBytes32", "_bytes"], "vars": {"_bytes": "bytes", "bytes32": "bytes32", "ret": "bytes32"}, "loop_info": [], "related_expression": ["_bytes.length<32", "ret=mload(uint256)(_bytes+32)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_bytes--variables"], "modifier": [], "return_expressions": ["abi.decode(_bytes,(bytes32))"], "info": ["Lib_BytesUtils", "toBytes32", "_bytes"], "vars": {"_bytes": "bytes", "bytes32": "bytes32", "ret": "bytes32"}, "loop_info": [], "related_expression": ["not(_bytes.length<32)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_bytes--variables"], "modifier": [], "return_expressions": ["uint256(toBytes32(_bytes))"], "info": ["Lib_BytesUtils", "toUint256", "_bytes"], "vars": {"_bytes": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["nibbles--variables"], "modifier": [], "return_expressions": ["nibbles"], "info": ["Lib_BytesUtils", "toNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "nibbles": "bytes"}, "loop_info": [2, 5], "related_expression": ["nibbles=newbytes(_bytes.length*2)", "i=0", "i++", "i<_bytes.length", "nibbles[i*2]=_bytes[i]>>4", "nibbles[i*2+1]=bytes1(uint8(_bytes[i])%16)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["nibbles--variables"], "modifier": [], "return_expressions": ["nibbles"], "info": ["Lib_BytesUtils", "toNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "nibbles": "bytes"}, "loop_info": [2, 2], "related_expression": ["nibbles=newbytes(_bytes.length*2)", "i=0", "not(i<_bytes.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "fromNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "ret": "bytes"}, "loop_info": [2, 4], "related_expression": ["ret=newbytes(_bytes.length/2)", "i=0", "ret[i]=(_bytes[i*2]<<4)|(_bytes[i*2+1])", "i++", "i<ret.length"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "fromNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "ret": "bytes"}, "loop_info": [2, 2], "related_expression": ["ret=newbytes(_bytes.length/2)", "i=0", "not(i<ret.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["_bytes--variables", "_other--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(_bytes)==keccak256(bytes)(_other)"], "info": ["Lib_BytesUtils", "equal", "_bytes", "_other"], "vars": {"_bytes": "bytes", "_other": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["OwnableUpgradeable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["OwnableUpgradeable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["OwnableUpgradeable", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["PausableUpgradeable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["PausableUpgradeable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_paused"], "info": ["PausableUpgradeable", "paused"], "vars": {"_paused": "bool"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["ContextUpgradeable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["ContextUpgradeable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Ownable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Ownable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Ownable", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Context", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Context", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}]