[{"visibility": "external", "return_vars": [], "modifier": [], "return_expressions": ["UNIT"], "info": ["SafeDecimalMath", "unit"], "vars": {"UNIT": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "external", "return_vars": [], "modifier": [], "return_expressions": ["PRECISE_UNIT"], "info": ["SafeDecimalMath", "preciseUnit"], "vars": {"PRECISE_UNIT": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["y--variables", "x--variables"], "modifier": [], "return_expressions": ["x.mul(y)/UNIT"], "info": ["SafeDecimalMath", "multiplyDecimal", "x", "y"], "vars": {"UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["quotientTimesTen--variables"], "modifier": [], "return_expressions": ["quotientTimesTen/10"], "info": ["SafeDecimalMath", "_multiplyDecimalRound", "x", "y", "precisionUnit"], "vars": {"precisionUnit": "uint256", "quotientTimesTen": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": ["quotientTimesTen=x.mul(y)/(precisionUnit/10)", "quotientTimesTen%10>=5", "quotientTimesTen+=10"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_+="]}, {"visibility": "private", "return_vars": ["quotientTimesTen--variables"], "modifier": [], "return_expressions": ["quotientTimesTen/10"], "info": ["SafeDecimalMath", "_multiplyDecimalRound", "x", "y", "precisionUnit"], "vars": {"precisionUnit": "uint256", "quotientTimesTen": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": ["quotientTimesTen=x.mul(y)/(precisionUnit/10)", "not(quotientTimesTen%10>=5)"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["y--variables", "x--variables"], "modifier": [], "return_expressions": ["_multiplyDecimalRound(x,y,PRECISE_UNIT)"], "info": ["SafeDecimalMath", "multiplyDecimalRoundPrecise", "x", "y"], "vars": {"PRECISE_UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["y--variables", "x--variables"], "modifier": [], "return_expressions": ["_multiplyDecimalRound(x,y,UNIT)"], "info": ["SafeDecimalMath", "multiplyDecimalRound", "x", "y"], "vars": {"UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["x--variables", "y--variables"], "modifier": [], "return_expressions": ["x.mul(UNIT).div(y)"], "info": ["SafeDecimalMath", "divideDecimal", "x", "y"], "vars": {"UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["resultTimesTen--variables"], "modifier": [], "return_expressions": ["resultTimesTen/10"], "info": ["SafeDecimalMath", "_divideDecimalRound", "x", "y", "precisionUnit"], "vars": {"precisionUnit": "uint256", "resultTimesTen": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": ["resultTimesTen=x.mul(precisionUnit*10).div(y)", "resultTimesTen%10>=5", "resultTimesTen+=10"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_+="]}, {"visibility": "private", "return_vars": ["resultTimesTen--variables"], "modifier": [], "return_expressions": ["resultTimesTen/10"], "info": ["SafeDecimalMath", "_divideDecimalRound", "x", "y", "precisionUnit"], "vars": {"precisionUnit": "uint256", "resultTimesTen": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": ["resultTimesTen=x.mul(precisionUnit*10).div(y)", "not(resultTimesTen%10>=5)"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["y--variables", "x--variables"], "modifier": [], "return_expressions": ["_divideDecimalRound(x,y,UNIT)"], "info": ["SafeDecimalMath", "divideDecimalRound", "x", "y"], "vars": {"UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["x--variables", "y--variables"], "modifier": [], "return_expressions": ["_divideDecimalRound(x,y,PRECISE_UNIT)"], "info": ["SafeDecimalMath", "divideDecimalRoundPrecise", "x", "y"], "vars": {"PRECISE_UNIT": "uint256", "x": "uint256", "y": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["i--variables"], "modifier": [], "return_expressions": ["i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR)"], "info": ["SafeDecimalMath", "decimalToPreciseDecimal", "i"], "vars": {"UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR": "uint256", "i": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["quotientTimesTen--variables"], "modifier": [], "return_expressions": ["quotientTimesTen/10"], "info": ["SafeDecimalMath", "preciseDecimalToDecimal", "i"], "vars": {"UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR": "uint256", "i": "uint256", "quotientTimesTen": "uint256"}, "loop_info": [], "related_expression": ["quotientTimesTen=i/(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR/10)", "quotientTimesTen%10>=5", "quotientTimesTen+=10"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_+="]}, {"visibility": "internal", "return_vars": ["quotientTimesTen--variables"], "modifier": [], "return_expressions": ["quotientTimesTen/10"], "info": ["SafeDecimalMath", "preciseDecimalToDecimal", "i"], "vars": {"UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR": "uint256", "i": "uint256", "quotientTimesTen": "uint256"}, "loop_info": [], "related_expression": ["quotientTimesTen=i/(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR/10)", "not(quotientTimesTen%10>=5)"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["BoringSatelliteChef", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["BoringSatelliteChef", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["BoringSatelliteChef", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "external", "return_vars": [], "modifier": [], "return_expressions": ["poolInfo.length"], "info": ["BoringSatelliteChef", "poolLength"], "vars": {"poolInfo": "BoringSatelliteChef.PoolInfo[]"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_from--variables"], "modifier": [], "return_expressions": ["endBlock.sub(_from)"], "info": ["BoringSatelliteChef", "getMultiplier", "_from", "_to"], "vars": {"_from": "uint256", "_to": "uint256", "endBlock": "uint256"}, "loop_info": [], "related_expression": ["_to>endBlock"], "related_expression_type": ["Condition"]}, {"visibility": "public", "return_vars": ["_to--variables", "_from--variables"], "modifier": [], "return_expressions": ["_to.sub(_from)"], "info": ["BoringSatelliteChef", "getMultiplier", "_from", "_to"], "vars": {"_from": "uint256", "_to": "uint256", "endBlock": "uint256"}, "loop_info": [], "related_expression": ["not(_to>endBlock)"], "related_expression_type": ["Condition"]}, {"visibility": "external", "return_vars": ["user--variables", "accBoringPerShare--variables"], "modifier": [], "return_expressions": ["user.amount.mul(accBoringPerShare).div(1e12).sub(user.rewardDebt)"], "info": ["BoringSatelliteChef", "pendingBoring", "_pid", "_user"], "vars": {"_pid": "uint256", "_user": "address", "accBoringPerShare": "uint256", "block.number": "uint256", "boringPerBlock": "uint256", "boringReward": "uint256", "lpSupply": "uint256", "multiplier": "uint256", "pool": "BoringSatelliteChef.PoolInfo", "poolInfo": "BoringSatelliteChef.PoolInfo[]", "this": "address", "totalAllocPoint": "uint256", "user": "BoringSatelliteChef.UserInfo", "userInfo": "mapping(uint256 => mapping(address => BoringSatelliteChef.UserInfo))"}, "loop_info": [], "related_expression": ["pool=poolInfo[_pid]", "user=userInfo[_pid][_user]", "accBoringPerShare=pool.accBoringPerShare", "lpSupply=pool.lpToken.balanceOf(address(this))", "block.number>pool.lastRewardBlock&&lpSupply!=0", "multiplier=getMultiplier(pool.lastRewardBlock,block.number)", "boringReward=multiplier.mul(boringPerBlock).mul(pool.allocPoint).div(totalAllocPoint)", "accBoringPerShare=accBoringPerShare.add(boringReward.mul(1e12).div(lpSupply))"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "external", "return_vars": ["user--variables", "accBoringPerShare--variables"], "modifier": [], "return_expressions": ["user.amount.mul(accBoringPerShare).div(1e12).sub(user.rewardDebt)"], "info": ["BoringSatelliteChef", "pendingBoring", "_pid", "_user"], "vars": {"_pid": "uint256", "_user": "address", "accBoringPerShare": "uint256", "block.number": "uint256", "boringPerBlock": "uint256", "boringReward": "uint256", "lpSupply": "uint256", "multiplier": "uint256", "pool": "BoringSatelliteChef.PoolInfo", "poolInfo": "BoringSatelliteChef.PoolInfo[]", "this": "address", "totalAllocPoint": "uint256", "user": "BoringSatelliteChef.UserInfo", "userInfo": "mapping(uint256 => mapping(address => BoringSatelliteChef.UserInfo))"}, "loop_info": [], "related_expression": ["pool=poolInfo[_pid]", "user=userInfo[_pid][_user]", "accBoringPerShare=pool.accBoringPerShare", "lpSupply=pool.lpToken.balanceOf(address(this))", "not(block.number>pool.lastRewardBlock&&lpSupply!=0)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "public", "return_vars": ["_tvl--variables"], "modifier": [], "return_expressions": ["_tvl"], "info": ["BoringSatelliteChef", "calculateTVL"], "vars": {"_reserve0": "uint112", "_tvl": "uint256", "amount": "uint256", "decimals": "uint8", "decimals_scope_1": "uint8", "diff": "uint256", "diff_scope_3": "uint256", "length": "uint256", "lpAmount": "uint256", "lpSupply": "uint256", "oracle": "IOracle", "pid": "uint256", "pool": "BoringSatelliteChef.PoolInfo", "poolInfo": "BoringSatelliteChef.PoolInfo[]", "price": "uint256", "price_scope_2": "uint256", "symbol": "string", "symbol_scope_0": "string", "this": "address", "token0": "address"}, "loop_info": [3, 13], "related_expression": ["_tvl=0", "length=poolInfo.length", "pid=0", "decimals=IERC20Metadata(address(pool.lpToken)).decimals()", "price=oracle.getPrice(stringToBytes32(symbol))", "diff=uint256(18).sub(uint256(decimals))", "_tvl=_tvl.add(lpAmount.mul(10**(diff)).multiplyDecimal(price))", "++pid", "pid<length", "pool=poolInfo[pid]", "lpAmount=pool.lpToken.balanceOf(address(this))", "pool._type==1", "pool.isSingle", "symbol=IERC20Metadata(address(pool.lpToken)).symbol()"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "public", "return_vars": ["_tvl--variables"], "modifier": [], "return_expressions": ["_tvl"], "info": ["BoringSatelliteChef", "calculateTVL"], "vars": {"_reserve0": "uint112", "_tvl": "uint256", "amount": "uint256", "decimals": "uint8", "decimals_scope_1": "uint8", "diff": "uint256", "diff_scope_3": "uint256", "length": "uint256", "lpAmount": "uint256", "lpSupply": "uint256", "oracle": "IOracle", "pid": "uint256", "pool": "BoringSatelliteChef.PoolInfo", "poolInfo": "BoringSatelliteChef.PoolInfo[]", "price": "uint256", "price_scope_2": "uint256", "symbol": "string", "symbol_scope_0": "string", "this": "address", "token0": "address"}, "loop_info": [3, 3], "related_expression": ["_tvl=0", "length=poolInfo.length", "pid=0", "not(pid<length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["tvl"], "info": ["BoringSatelliteChef", "satelliteTVL"], "vars": {"tvl": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Context", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Context", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Ownable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Ownable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Ownable", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["c--variables"], "modifier": [], "return_expressions": ["c"], "info": ["SafeMath", "add", "a", "b"], "vars": {"a": "uint256", "b": "uint256", "c": "uint256"}, "loop_info": [], "related_expression": ["c=a+b", "c>=a"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["a--variables", "b--variables"], "modifier": [], "return_expressions": ["sub(a,b,SafeMath:subtractionoverflow)"], "info": ["SafeMath", "sub", "a", "b"], "vars": {"a": "uint256", "b": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["c--variables"], "modifier": [], "return_expressions": ["c"], "info": ["SafeMath", "sub", "a", "b", "errorMessage"], "vars": {"a": "uint256", "b": "uint256", "c": "uint256", "errorMessage": "string"}, "loop_info": [], "related_expression": ["b<=a", "c=a-b"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["0"], "info": ["SafeMath", "mul", "a", "b"], "vars": {"a": "uint256", "b": "uint256", "c": "uint256"}, "loop_info": [], "related_expression": ["a==0"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["c--variables"], "modifier": [], "return_expressions": ["c"], "info": ["SafeMath", "mul", "a", "b"], "vars": {"a": "uint256", "b": "uint256", "c": "uint256"}, "loop_info": [], "related_expression": ["not(a==0)", "c=a*b", "c/a==b"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["a--variables", "b--variables"], "modifier": [], "return_expressions": ["div(a,b,SafeMath:divisionbyzero)"], "info": ["SafeMath", "div", "a", "b"], "vars": {"a": "uint256", "b": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["c--variables"], "modifier": [], "return_expressions": ["c"], "info": ["SafeMath", "div", "a", "b", "errorMessage"], "vars": {"a": "uint256", "b": "uint256", "c": "uint256", "errorMessage": "string"}, "loop_info": [], "related_expression": ["b>0", "c=a/b"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["b--variables", "a--variables"], "modifier": [], "return_expressions": ["mod(a,b,SafeMath:modulobyzero)"], "info": ["SafeMath", "mod", "a", "b"], "vars": {"a": "uint256", "b": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["a--variables", "b--variables"], "modifier": [], "return_expressions": ["a%b"], "info": ["SafeMath", "mod", "a", "b", "errorMessage"], "vars": {"a": "uint256", "b": "uint256", "errorMessage": "string"}, "loop_info": [], "related_expression": ["b!=0"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["accountHash--variables", "codehash--variables"], "modifier": [], "return_expressions": ["(codehash!=accountHash&&codehash!=0x0)"], "info": ["Address", "isContract", "account"], "vars": {"account": "address", "accountHash": "bytes32", "codehash": "bytes32"}, "loop_info": [], "related_expression": ["accountHash=0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", "codehash=extcodehash(uint256)(account)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["target--variables", "data--variables"], "modifier": [], "return_expressions": ["functionCall(target,data,Address:low-levelcallfailed)"], "info": ["Address", "functionCall", "target", "data"], "vars": {"data": "bytes", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["target--variables", "data--variables", "errorMessage--variables"], "modifier": [], "return_expressions": ["_functionCallWithValue(target,data,0,errorMessage)"], "info": ["Address", "functionCall", "target", "data", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["target--variables", "data--variables", "value--variables"], "modifier": [], "return_expressions": ["functionCallWithValue(target,data,value,Address:low-levelcallwithvaluefailed)"], "info": ["Address", "functionCallWithValue", "target", "data", "value"], "vars": {"data": "bytes", "target": "address", "value": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["value--variables", "target--variables", "errorMessage--variables", "data--variables"], "modifier": [], "return_expressions": ["_functionCallWithValue(target,data,value,errorMessage)"], "info": ["Address", "functionCallWithValue", "target", "data", "value", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "target": "address", "this": "address", "value": "uint256"}, "loop_info": [], "related_expression": ["address(this).balance>=value"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["returndata--variables"], "modifier": [], "return_expressions": ["returndata"], "info": ["Address", "_functionCallWithValue", "target", "data", "weiValue", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "returndata": "bytes", "returndata_size__functionCallWithValue_asm_0": "uint256", "success": "bool", "target": "address", "weiValue": "uint256"}, "loop_info": [], "related_expression": ["isContract(target)", "(success,returndata)=target.call{value:weiValue}(data)", "success"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["true"], "info": ["EnumerableSet", "_add", "set", "value"], "vars": {"set": "EnumerableSet.Set", "value": "bytes32"}, "loop_info": [], "related_expression": ["!_contains(set,value)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["false"], "info": ["EnumerableSet", "_add", "set", "value"], "vars": {"set": "EnumerableSet.Set", "value": "bytes32"}, "loop_info": [], "related_expression": ["not(!_contains(set,value))"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["true"], "info": ["EnumerableSet", "_remove", "set", "value"], "vars": {"lastIndex": "uint256", "lastvalue": "bytes32", "set": "EnumerableSet.Set", "toDeleteIndex": "uint256", "value": "bytes32", "valueIndex": "uint256"}, "loop_info": [], "related_expression": ["valueIndex!=0"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["false"], "info": ["EnumerableSet", "_remove", "set", "value"], "vars": {"lastIndex": "uint256", "lastvalue": "bytes32", "set": "EnumerableSet.Set", "toDeleteIndex": "uint256", "value": "bytes32", "valueIndex": "uint256"}, "loop_info": [], "related_expression": ["not(valueIndex!=0)"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["set--variables", "value--variables"], "modifier": [], "return_expressions": ["set._indexes[value]!=0"], "info": ["EnumerableSet", "_contains", "set", "value"], "vars": {"set": "EnumerableSet.Set", "value": "bytes32"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["set--variables"], "modifier": [], "return_expressions": ["set._values.length"], "info": ["EnumerableSet", "_length", "set"], "vars": {"set": "EnumerableSet.Set"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": ["index--variables", "set--variables"], "modifier": [], "return_expressions": ["set._values[index]"], "info": ["EnumerableSet", "_at", "set", "index"], "vars": {"index": "uint256", "set": "EnumerableSet.Set"}, "loop_info": [], "related_expression": ["set._values.length>index"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["value--variables", "set--variables"], "modifier": [], "return_expressions": ["_add(set._inner,bytes32(uint256(value)))"], "info": ["EnumerableSet", "add", "set", "value"], "vars": {"set": "EnumerableSet.AddressSet", "value": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "value--variables"], "modifier": [], "return_expressions": ["_remove(set._inner,bytes32(uint256(value)))"], "info": ["EnumerableSet", "remove", "set", "value"], "vars": {"set": "EnumerableSet.AddressSet", "value": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["value--variables", "set--variables"], "modifier": [], "return_expressions": ["_contains(set._inner,bytes32(uint256(value)))"], "info": ["EnumerableSet", "contains", "set", "value"], "vars": {"set": "EnumerableSet.AddressSet", "value": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables"], "modifier": [], "return_expressions": ["_length(set._inner)"], "info": ["EnumerableSet", "length", "set"], "vars": {"set": "EnumerableSet.AddressSet"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "index--variables"], "modifier": [], "return_expressions": ["address(uint256(_at(set._inner,index)))"], "info": ["EnumerableSet", "at", "set", "index"], "vars": {"index": "uint256", "set": "EnumerableSet.AddressSet"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "value--variables"], "modifier": [], "return_expressions": ["_add(set._inner,bytes32(value))"], "info": ["EnumerableSet", "add", "set", "value"], "vars": {"set": "EnumerableSet.UintSet", "value": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "value--variables"], "modifier": [], "return_expressions": ["_remove(set._inner,bytes32(value))"], "info": ["EnumerableSet", "remove", "set", "value"], "vars": {"set": "EnumerableSet.UintSet", "value": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "value--variables"], "modifier": [], "return_expressions": ["_contains(set._inner,bytes32(value))"], "info": ["EnumerableSet", "contains", "set", "value"], "vars": {"set": "EnumerableSet.UintSet", "value": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables"], "modifier": [], "return_expressions": ["_length(set._inner)"], "info": ["EnumerableSet", "length", "set"], "vars": {"set": "EnumerableSet.UintSet"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["set--variables", "index--variables"], "modifier": [], "return_expressions": ["uint256(_at(set._inner,index))"], "info": ["EnumerableSet", "at", "set", "index"], "vars": {"index": "uint256", "set": "EnumerableSet.UintSet"}, "loop_info": [], "related_expression": [], "related_expression_type": []}]