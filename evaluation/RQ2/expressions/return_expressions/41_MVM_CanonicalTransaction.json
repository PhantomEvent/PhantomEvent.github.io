[{"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Context", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Context", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Ownable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Ownable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Ownable", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Lib_AddressManager", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Lib_AddressManager", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Lib_AddressManager", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "external", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["addresses[_getNameHash(_name)]"], "info": ["Lib_AddressManager", "getAddress", "_name"], "vars": {"_name": "string", "addresses": "mapping(bytes32 => address)"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(abi.encodePacked(_name))"], "info": ["Lib_AddressManager", "_getNameHash", "_name"], "vars": {"_name": "string"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["libAddressManager.getAddress(_name)"], "info": ["Lib_AddressResolver", "resolve", "_name"], "vars": {"_name": "string", "libAddressManager": "Lib_AddressManager"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables", "ptr--variables"], "modifier": [], "return_expressions": ["RLPItem({length:_in.length,ptr:ptr})"], "info": ["Lib_RLPReader", "toRLPItem", "_in"], "vars": {"_in": "bytes", "ptr": "uint256"}, "loop_info": [], "related_expression": ["ptr=_in+32"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"MAX_LIST_LENGTH": "uint256", "_in": "Lib_RLPReader.RLPItem", "itemCount": "uint256", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "listOffset": "uint256", "offset": "uint256", "out": "Lib_RLPReader.RLPItem[]"}, "loop_info": [5, 10], "related_expression": ["(listOffset,itemType)=_decodeLength(_in)", "itemType==RLPItemType.LIST_ITEM", "out=newLib_RLPReader.RLPItem[](MAX_LIST_LENGTH)", "itemCount=0", "offset=listOffset", "out[itemCount]=RLPItem({length:itemLength+itemOffset,ptr:_in.ptr+offset})", "itemCount+=1", "offset+=itemOffset+itemLength", "offset<_in.length", "itemCount<MAX_LIST_LENGTH", "(itemOffset,itemLength)=_decodeLength(RLPItem({length:_in.length-offset,ptr:_in.ptr+offset}))", "mstore(uint256,uint256)(out,itemCount)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Condition", "Condition", "AssignmentOperation_=", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"MAX_LIST_LENGTH": "uint256", "_in": "Lib_RLPReader.RLPItem", "itemCount": "uint256", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "listOffset": "uint256", "offset": "uint256", "out": "Lib_RLPReader.RLPItem[]"}, "loop_info": [5, 5], "related_expression": ["(listOffset,itemType)=_decodeLength(_in)", "itemType==RLPItemType.LIST_ITEM", "out=newLib_RLPReader.RLPItem[](MAX_LIST_LENGTH)", "itemCount=0", "offset=listOffset", "not(offset<_in.length)", "mstore(uint256,uint256)(out,itemCount)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readList(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readList", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables", "itemLength--variables", "itemOffset--variables"], "modifier": [], "return_expressions": ["_copy(_in.ptr,itemOffset,itemLength)"], "info": ["Lib_RLPReader", "readBytes", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType"}, "loop_info": [], "related_expression": ["itemType==RLPItemType.DATA_ITEM"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBytes(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBytes", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["string(readBytes(_in))"], "info": ["Lib_RLPReader", "readString", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readString(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readString", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "out": "bytes32", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length<=33", "(itemOffset,itemLength,itemType)=_decodeLength(_in)", "itemType==RLPItemType.DATA_ITEM", "ptr=_in.ptr+itemOffset", "out=mload(uint256)(ptr)", "itemLength<32", "out=out/256**32-itemLength"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "itemLength": "uint256", "itemOffset": "uint256", "itemType": "Lib_RLPReader.RLPItemType", "out": "bytes32", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length<=33", "(itemOffset,itemLength,itemType)=_decodeLength(_in)", "itemType==RLPItemType.DATA_ITEM", "ptr=_in.ptr+itemOffset", "out=mload(uint256)(ptr)", "not(itemLength<32)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBytes32(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBytes32", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["uint256(readBytes32(_in))"], "info": ["Lib_RLPReader", "readUint256", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readUint256(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readUint256", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out!=0"], "info": ["Lib_RLPReader", "readBool", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "out": "uint256", "ptr": "uint256"}, "loop_info": [], "related_expression": ["_in.length==1", "ptr=_in.ptr", "out=byte(uint256,uint256)(0,mload(uint256)(ptr))", "out==0||out==1"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readBool(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readBool", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["address(0)"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": ["_in.length==1"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["address(uint160(readUint256(_in)))"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": ["not(_in.length==1)", "_in.length==21"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["readAddress(toRLPItem(_in))"], "info": ["Lib_RLPReader", "readAddress", "_in"], "vars": {"_in": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_copy(_in)"], "info": ["Lib_RLPReader", "readRawBytes", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["(0,1,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "prefix<=0x7f"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["strLen--variables"], "modifier": [], "return_expressions": ["(1,strLen,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "prefix<=0xb7", "strLen=prefix-0x80", "_in.length>strLen"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["lenOfStrLen--variables", "strLen_scope_0--variables"], "modifier": [], "return_expressions": ["(1+lenOfStrLen,strLen_scope_0,RLPItemType.DATA_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "prefix<=0xbf", "lenOfStrLen=prefix-0xb7", "_in.length>lenOfStrLen", "strLen=mload(uint256)(ptr+1)/256**32-lenOfStrLen", "_in.length>lenOfStrLen+strLen_scope_0"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["listLen--variables"], "modifier": [], "return_expressions": ["(1,listLen,RLPItemType.LIST_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "not(prefix<=0xbf)", "prefix<=0xf7", "listLen=prefix-0xc0", "_in.length>listLen"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["lenOfListLen--variables", "listLen_scope_1--variables"], "modifier": [], "return_expressions": ["(1+lenOfListLen,listLen_scope_1,RLPItemType.LIST_ITEM)"], "info": ["Lib_RLPReader", "_decodeLength", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem", "lenOfListLen": "uint256", "lenOfStrLen": "uint256", "listLen": "uint256", "listLen_scope_1": "uint256", "prefix": "uint256", "ptr": "uint256", "strLen": "uint256", "strLen_scope_0": "uint256"}, "loop_info": [], "related_expression": ["_in.length>0", "ptr=_in.ptr", "prefix=byte(uint256,uint256)(0,mload(uint256)(ptr))", "not(prefix<=0x7f)", "not(prefix<=0xb7)", "not(prefix<=0xbf)", "not(prefix<=0xf7)", "lenOfListLen=prefix-0xf7", "_in.length>lenOfListLen", "listLen=mload(uint256)(ptr+1)/256**32-lenOfListLen", "_in.length>lenOfListLen+listLen_scope_1"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [], "related_expression": ["out=newbytes(_length)", "out.length==0"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [5, 9], "related_expression": ["out=newbytes(_length)", "not(out.length==0)", "src=_src+_offset", "dest=out+32", "i=0", "src+=32", "dest+=32", "i++", "i<_length/32", "mstore(uint256,uint256)(dest,mload(uint256)(src))", "mask=256**(32-(_length%32))-1", "mstore(uint256,uint256)(dest,mload(uint256)(src)&~mask|mload(uint256)(dest)&mask)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_+=", "AssignmentOperation_+=", "Expression", "Condition", "CallExpression", "AssignmentOperation_=", "CallExpression"], "isloop": true}, {"visibility": "private", "return_vars": ["out--variables"], "modifier": [], "return_expressions": ["out"], "info": ["Lib_RLPReader", "_copy", "_src", "_offset", "_length"], "vars": {"_length": "uint256", "_offset": "uint256", "_src": "uint256", "dest": "uint256", "i": "uint256", "mask": "uint256", "out": "bytes", "src": "uint256"}, "loop_info": [5, 5], "related_expression": ["out=newbytes(_length)", "not(out.length==0)", "src=_src+_offset", "dest=out+32", "i=0", "not(i<_length/32)", "mask=256**(32-(_length%32))-1", "mstore(uint256,uint256)(dest,mload(uint256)(src)&~mask|mload(uint256)(dest)&mask)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "CallExpression"], "isloop": true}, {"visibility": "private", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_copy(_in.ptr,0,_in.length)"], "info": ["Lib_RLPReader", "_copy", "_in"], "vars": {"_in": "Lib_RLPReader.RLPItem"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBytes", "_in"], "vars": {"_in": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["_in.length==1&&uint8(_in[0])<128", "encoded=_in"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBytes", "_in"], "vars": {"_in": "bytes", "encoded": "bytes"}, "loop_info": [], "related_expression": ["not(_in.length==1&&uint8(_in[0])<128)", "encoded=abi.encodePacked(_writeLength(_in.length,128),_in)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["list--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(_writeLength(list.length,192),list)"], "info": ["Lib_RLPWriter", "writeList", "_in"], "vars": {"_in": "bytes[]", "list": "bytes"}, "loop_info": [], "related_expression": ["list=_flatten(_in)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(bytes(_in))"], "info": ["Lib_RLPWriter", "writeString", "_in"], "vars": {"_in": "string"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(abi.encodePacked(_in))"], "info": ["Lib_RLPWriter", "writeAddress", "_in"], "vars": {"_in": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["writeBytes(_toBinary(_in))"], "info": ["Lib_RLPWriter", "writeUint", "_in"], "vars": {"_in": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBool", "_in"], "vars": {"_in": "bool", "encoded": "bytes"}, "loop_info": [], "related_expression": ["encoded=newbytes(1)", "_in", "encoded[0]=bytes1(0x01)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "writeBool", "_in"], "vars": {"_in": "bool", "encoded": "bytes"}, "loop_info": [], "related_expression": ["encoded=newbytes(1)", "not(_in)", "encoded[0]=bytes1(0x80)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [], "related_expression": ["_len<56", "encoded=newbytes(1)", "encoded[0]=bytes1(uint8(_len)+uint8(_offset))"], "related_expression_type": ["Condition", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 4, 8, 8], "related_expression": ["not(_len<56)", "i=1", "lenLen++", "i*=256", "_len/i!=0", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "not(i<=lenLen)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Expression", "AssignmentOperation_*=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 2, 6, 8], "related_expression": ["not(_len<56)", "i=1", "not(_len/i!=0)", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "i<=lenLen", "encoded[i]=bytes1(uint8((_len/(256**(lenLen-i)))%256))", "i++"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "private", "return_vars": ["encoded--variables"], "modifier": [], "return_expressions": ["encoded"], "info": ["Lib_RLPWriter", "_writeLength", "_len", "_offset"], "vars": {"_len": "uint256", "_offset": "uint256", "encoded": "bytes", "i": "uint256", "lenLen": "uint256"}, "loop_info": [2, 2, 6, 6], "related_expression": ["not(_len<56)", "i=1", "not(_len/i!=0)", "encoded=newbytes(lenLen+1)", "encoded[0]=bytes1(uint8(lenLen)+uint8(_offset)+55)", "i=1", "not(i<=lenLen)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 5, 8, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "b[i]!=0", "i++", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 5, 8, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "b[i]!=0", "i++", "i<32", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 3, 6, 8], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "j++", "j<res.length", "res[j]=b[i++]"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 3, 6, 6], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "i<32", "b[i]!=0", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 4, 7, 7], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "not(b[i]!=0)", "i++", "i<32", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Expression", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 2, 5, 7], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "not(i<32)", "res=newbytes(32-i)", "j=0", "j++", "j<res.length", "res[j]=b[i++]"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["res--variables"], "modifier": [], "return_expressions": ["res"], "info": ["Lib_RLPWriter", "_toBinary", "_x"], "vars": {"_x": "uint256", "b": "bytes", "i": "uint256", "j": "uint256", "res": "bytes"}, "loop_info": [2, 2, 5, 5], "related_expression": ["b=abi.encodePacked(_x)", "i=0", "not(i<32)", "res=newbytes(32-i)", "j=0", "not(j<res.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["newbytes(0)"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [], "related_expression": ["_list.length==0"], "related_expression_type": ["Condition"]}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 4, 8, 8], "related_expression": ["not(_list.length==0)", "i=0", "i++", "i<_list.length", "len+=_list[i].length", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "not(i<_list.length)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_+=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 2, 6, 10], "related_expression": ["not(_list.length==0)", "i=0", "not(i<_list.length)", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "_memcpy(flattenedPtr,listPtr,item.length)", "flattenedPtr+=_list[i].length", "i++", "i<_list.length", "item=_list[i]"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_+=", "Expression", "Condition", "AssignmentOperation_="], "isloop": true}, {"visibility": "private", "return_vars": ["flattened--variables"], "modifier": [], "return_expressions": ["flattened"], "info": ["Lib_RLPWriter", "_flatten", "_list"], "vars": {"_list": "bytes[]", "flattened": "bytes", "flattenedPtr": "uint256", "i": "uint256", "item": "bytes", "len": "uint256", "listPtr": "uint256"}, "loop_info": [2, 2, 6, 6], "related_expression": ["not(_list.length==0)", "i=0", "not(i<_list.length)", "flattened=newbytes(len)", "flattenedPtr=flattened+0x20", "i=0", "not(i<_list.length)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_31844_2447_0_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [7, 9], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "switch_expr_31844_2447_0_slice_asm_0==0", "tempBytes=mload(uint256)(0x40)", "mc_slice_asm_0=tempBytes+lengthmod_slice_asm_0+0x20*!lengthmod_slice_asm_0", "end_slice_asm_0=mc_slice_asm_0+_length", "mc_slice_asm_0<end_slice_asm_0", "mstore(uint256,uint256)(mc_slice_asm_0,mload(uint256)(cc_slice_asm_0))", "mc_slice_asm_0=mc_slice_asm_0+0x20", "mstore(uint256,uint256)(tempBytes,_length)", "mstore(uint256,uint256)(0x40,mc_slice_asm_0+31&~31)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "CallExpression", "AssignmentOperation_=", "CallExpression", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_31844_2447_0_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [7, 7], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "switch_expr_31844_2447_0_slice_asm_0==0", "tempBytes=mload(uint256)(0x40)", "mc_slice_asm_0=tempBytes+lengthmod_slice_asm_0+0x20*!lengthmod_slice_asm_0", "end_slice_asm_0=mc_slice_asm_0+_length", "mc_slice_asm_0<end_slice_asm_0", "mstore(uint256,uint256)(tempBytes,_length)", "mstore(uint256,uint256)(0x40,mc_slice_asm_0+31&~31)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "CallExpression", "CallExpression"], "isloop": true}, {"visibility": "internal", "return_vars": ["tempBytes--variables"], "modifier": [], "return_expressions": ["tempBytes"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start", "_length"], "vars": {"_bytes": "bytes", "_length": "uint256", "_start": "uint256", "cc_slice_asm_0": "uint256", "end_slice_asm_0": "uint256", "lengthmod_slice_asm_0": "uint256", "mc_slice_asm_0": "uint256", "switch_expr_31844_2447_0_slice_asm_0": "uint256", "tempBytes": "bytes"}, "loop_info": [], "related_expression": ["_length+31>=_length", "_start+_length>=_start", "_bytes.length>=_start+_length", "not(switch_expr_31844_2447_0_slice_asm_0==0)", "tempBytes=mload(uint256)(0x40)", "mstore(uint256,uint256)(tempBytes,0)", "mstore(uint256,uint256)(0x40,tempBytes+0x20)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "CallExpression"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes()"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start"], "vars": {"_bytes": "bytes", "_start": "uint256"}, "loop_info": [], "related_expression": ["_start>=_bytes.length"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_start--variables", "_bytes--variables"], "modifier": [], "return_expressions": ["slice(_bytes,_start,_bytes.length-_start)"], "info": ["Lib_BytesUtils", "slice", "_bytes", "_start"], "vars": {"_bytes": "bytes", "_start": "uint256"}, "loop_info": [], "related_expression": ["not(_start>=_bytes.length)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "toBytes32", "_bytes"], "vars": {"_bytes": "bytes", "bytes32": "bytes32", "ret": "bytes32"}, "loop_info": [], "related_expression": ["_bytes.length<32", "ret=mload(uint256)(_bytes+32)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_bytes--variables"], "modifier": [], "return_expressions": ["abi.decode(_bytes,(bytes32))"], "info": ["Lib_BytesUtils", "toBytes32", "_bytes"], "vars": {"_bytes": "bytes", "bytes32": "bytes32", "ret": "bytes32"}, "loop_info": [], "related_expression": ["not(_bytes.length<32)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_bytes--variables"], "modifier": [], "return_expressions": ["uint256(toBytes32(_bytes))"], "info": ["Lib_BytesUtils", "toUint256", "_bytes"], "vars": {"_bytes": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["nibbles--variables"], "modifier": [], "return_expressions": ["nibbles"], "info": ["Lib_BytesUtils", "toNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "nibbles": "bytes"}, "loop_info": [2, 5], "related_expression": ["nibbles=newbytes(_bytes.length*2)", "i=0", "nibbles[i*2]=_bytes[i]>>4", "nibbles[i*2+1]=bytes1(uint8(_bytes[i])%16)", "i++", "i<_bytes.length"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["nibbles--variables"], "modifier": [], "return_expressions": ["nibbles"], "info": ["Lib_BytesUtils", "toNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "nibbles": "bytes"}, "loop_info": [2, 2], "related_expression": ["nibbles=newbytes(_bytes.length*2)", "i=0", "not(i<_bytes.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "fromNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "ret": "bytes"}, "loop_info": [2, 4], "related_expression": ["ret=newbytes(_bytes.length/2)", "i=0", "ret[i]=(_bytes[i*2]<<4)|(_bytes[i*2+1])", "i++", "i<ret.length"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Expression", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["ret--variables"], "modifier": [], "return_expressions": ["ret"], "info": ["Lib_BytesUtils", "fromNibbles", "_bytes"], "vars": {"_bytes": "bytes", "i": "uint256", "ret": "bytes"}, "loop_info": [2, 2], "related_expression": ["ret=newbytes(_bytes.length/2)", "i=0", "not(i<ret.length)"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["_bytes--variables", "_other--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(_bytes)==keccak256(bytes)(_other)"], "info": ["Lib_BytesUtils", "equal", "_bytes", "_other"], "vars": {"_bytes": "bytes", "_other": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["_in!=0"], "info": ["Lib_Bytes32Utils", "toBool", "_in"], "vars": {"_in": "bytes32"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes32(uint256(1))"], "info": ["Lib_Bytes32Utils", "fromBool", "_in"], "vars": {"_in": "bool"}, "loop_info": [], "related_expression": ["_in"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["bytes32(uint256(0))"], "info": ["Lib_Bytes32Utils", "fromBool", "_in"], "vars": {"_in": "bool"}, "loop_info": [], "related_expression": ["not(_in)"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["address(uint160(uint256(_in)))"], "info": ["Lib_Bytes32Utils", "toAddress", "_in"], "vars": {"_in": "bytes32"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_in--variables"], "modifier": [], "return_expressions": ["bytes32(uint256(uint160(_in)))"], "info": ["Lib_Bytes32Utils", "fromAddress", "_in"], "vars": {"_in": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_transaction--variables"], "modifier": [], "return_expressions": ["abi.encodePacked(_transaction.timestamp,_transaction.blockNumber,_transaction.l1QueueOrigin,_transaction.l1TxOrigin,_transaction.entrypoint,_transaction.gasLimit,_transaction.data)"], "info": ["Lib_OVMCodec", "encodeTransaction", "_transaction"], "vars": {"_transaction": "Lib_OVMCodec.Transaction"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_transaction--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(encodeTransaction(_transaction))"], "info": ["Lib_OVMCodec", "hashTransaction", "_transaction"], "vars": {"_transaction": "Lib_OVMCodec.Transaction"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["accountState--variables"], "modifier": [], "return_expressions": ["EVMAccount({nonce:Lib_RLPReader.readUint256(accountState[0]),balance:Lib_RLPReader.readUint256(accountState[1]),storageRoot:Lib_RLPReader.readBytes32(accountState[2]),codeHash:Lib_RLPReader.readBytes32(accountState[3])})"], "info": ["Lib_OVMCodec", "decodeEVMAccount", "_encoded"], "vars": {"_encoded": "bytes", "accountState": "Lib_RLPReader.RLPItem[]"}, "loop_info": [], "related_expression": ["accountState=Lib_RLPReader.readList(_encoded)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_batchHeader--variables"], "modifier": [], "return_expressions": ["keccak256(bytes)(abi.encode(_batchHeader.batchRoot,_batchHeader.batchSize,_batchHeader.prevTotalElements,_batchHeader.extraData))"], "info": ["Lib_OVMCodec", "hashBatchHeader", "_batchHeader"], "vars": {"_batchHeader": "Lib_OVMCodec.ChainBatchHeader"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["_elements--variables"], "modifier": [], "return_expressions": ["_elements[0]"], "info": ["Lib_MerkleTree", "getMerkleRoot", "_elements"], "vars": {"_elements": "bytes32[]", "buf": "bytes", "defaults": "uint256[16]", "depth": "uint256", "halfRowSize": "uint256", "i": "uint256", "leftSibling": "bytes32", "rightSibling": "bytes32", "rowSize": "uint256", "rowSizeIsOdd": "bool"}, "loop_info": [], "related_expression": ["_elements.length>0", "_elements.length==1"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "internal", "return_vars": ["_elements--variables"], "modifier": [], "return_expressions": ["_elements[0]"], "info": ["Lib_MerkleTree", "getMerkleRoot", "_elements"], "vars": {"_elements": "bytes32[]", "buf": "bytes", "defaults": "uint256[16]", "depth": "uint256", "halfRowSize": "uint256", "i": "uint256", "leftSibling": "bytes32", "rightSibling": "bytes32", "rowSize": "uint256", "rowSizeIsOdd": "bool"}, "loop_info": [4, 7, 7, 14], "related_expression": ["_elements.length>0", "not(_elements.length==1)", "rowSize=_elements.length", "depth=0", "rowSize>1", "halfRowSize=rowSize/2", "rowSizeIsOdd=rowSize%2==1", "not(i<halfRowSize)", "rowSizeIsOdd", "leftSibling=_elements[rowSize-1]", "rightSibling=bytes32(defaults[depth])", "_elements[halfRowSize]=keccak256(bytes)(buf)", "rowSizeIsOdd", "rowSize=halfRowSize+1", "depth++"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression"], "isloop": true}, {"visibility": "internal", "return_vars": ["_elements--variables"], "modifier": [], "return_expressions": ["_elements[0]"], "info": ["Lib_MerkleTree", "getMerkleRoot", "_elements"], "vars": {"_elements": "bytes32[]", "buf": "bytes", "defaults": "uint256[16]", "depth": "uint256", "halfRowSize": "uint256", "i": "uint256", "leftSibling": "bytes32", "rightSibling": "bytes32", "rowSize": "uint256", "rowSizeIsOdd": "bool"}, "loop_info": [4, 4], "related_expression": ["_elements.length>0", "not(_elements.length==1)", "rowSize=_elements.length", "depth=0", "not(rowSize>1)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["_root--variables", "computedRoot--variables"], "modifier": [], "return_expressions": ["_root==computedRoot"], "info": ["Lib_MerkleTree", "verify", "_root", "_leaf", "_index", "_siblings", "_totalLeaves"], "vars": {"_index": "uint256", "_leaf": "bytes32", "_root": "bytes32", "_siblings": "bytes32[]", "_totalLeaves": "uint256", "computedRoot": "bytes32", "i": "uint256"}, "loop_info": [5, 9], "related_expression": ["_totalLeaves>0", "_index<_totalLeaves", "_siblings.length==_ceilLog2(_totalLeaves)", "computedRoot=_leaf", "i=0", "computedRoot=keccak256(bytes)(abi.encodePacked(_siblings[i],computedRoot))", "_index>>=1", "i++", "i<_siblings.length", "(_index&1)==1"], "related_expression_type": ["Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_>>=", "Expression", "Condition", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["_root--variables", "computedRoot--variables"], "modifier": [], "return_expressions": ["_root==computedRoot"], "info": ["Lib_MerkleTree", "verify", "_root", "_leaf", "_index", "_siblings", "_totalLeaves"], "vars": {"_index": "uint256", "_leaf": "bytes32", "_root": "bytes32", "_siblings": "bytes32[]", "_totalLeaves": "uint256", "computedRoot": "bytes32", "i": "uint256"}, "loop_info": [5, 5], "related_expression": ["_totalLeaves>0", "_index<_totalLeaves", "_siblings.length==_ceilLog2(_totalLeaves)", "computedRoot=_leaf", "i=0", "not(i<_siblings.length)"], "related_expression_type": ["Condition", "Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": [], "modifier": [], "return_expressions": ["0"], "info": ["Lib_MerkleTree", "_ceilLog2", "_in"], "vars": {"_in": "uint256", "highest": "uint256", "i": "uint256", "val": "uint256"}, "loop_info": [], "related_expression": ["_in>0", "_in==1"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "private", "return_vars": ["highest--variables"], "modifier": [], "return_expressions": ["highest"], "info": ["Lib_MerkleTree", "_ceilLog2", "_in"], "vars": {"_in": "uint256", "highest": "uint256", "i": "uint256", "val": "uint256"}, "loop_info": [4, 8], "related_expression": ["_in>0", "not(_in==1)", "highest=0", "i=128", "i>=1", "val&(((uint256(1)<<i)-1)<<i)!=0", "highest+=i", "val>>=i", "i>>=1", "(uint256(1)<<highest)!=_in", "highest+=1"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_>>=", "AssignmentOperation_>>=", "Condition", "AssignmentOperation_+="], "isloop": true}, {"visibility": "private", "return_vars": ["highest--variables"], "modifier": [], "return_expressions": ["highest"], "info": ["Lib_MerkleTree", "_ceilLog2", "_in"], "vars": {"_in": "uint256", "highest": "uint256", "i": "uint256", "val": "uint256"}, "loop_info": [4, 4], "related_expression": ["_in>0", "not(_in==1)", "highest=0", "i=128", "not(i>=1)", "(uint256(1)<<highest)!=_in", "highest+=1"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+="], "isloop": true}, {"visibility": "private", "return_vars": ["highest--variables"], "modifier": [], "return_expressions": ["highest"], "info": ["Lib_MerkleTree", "_ceilLog2", "_in"], "vars": {"_in": "uint256", "highest": "uint256", "i": "uint256", "val": "uint256"}, "loop_info": [4, 8], "related_expression": ["_in>0", "not(_in==1)", "highest=0", "i=128", "i>=1", "val&(((uint256(1)<<i)-1)<<i)!=0", "highest+=i", "val>>=i", "i>>=1", "not((uint256(1)<<highest)!=_in)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition", "AssignmentOperation_+=", "AssignmentOperation_>>=", "AssignmentOperation_>>=", "Condition"], "isloop": true}, {"visibility": "private", "return_vars": ["highest--variables"], "modifier": [], "return_expressions": ["highest"], "info": ["Lib_MerkleTree", "_ceilLog2", "_in"], "vars": {"_in": "uint256", "highest": "uint256", "i": "uint256", "val": "uint256"}, "loop_info": [4, 4], "related_expression": ["_in>0", "not(_in==1)", "highest=0", "i=128", "not(i>=1)", "not((uint256(1)<<highest)!=_in)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition", "Condition"], "isloop": true}, {"visibility": "public", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["libAddressManager.getAddress(_name)"], "info": ["StateCommitmentChain", "resolve", "_name"], "vars": {"_name": "string", "libAddressManager": "Lib_AddressManager"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["IChainStorageContainer(resolve(ChainStorageContainer-SCC-batches))"], "info": ["StateCommitmentChain", "batches"], "vars": {}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["getTotalElementsByChainId(DEFAULT_CHAINID)"], "info": ["StateCommitmentChain", "getTotalElements"], "vars": {"DEFAULT_CHAINID": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["getTotalBatchesByChainId(DEFAULT_CHAINID)"], "info": ["StateCommitmentChain", "getTotalBatches"], "vars": {"DEFAULT_CHAINID": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["getLastSequencerTimestampByChainId(DEFAULT_CHAINID)"], "info": ["StateCommitmentChain", "getLastSequencerTimestamp"], "vars": {"DEFAULT_CHAINID": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_element--variables", "_proof--variables", "_batchHeader--variables"], "modifier": [], "return_expressions": ["verifyStateCommitmentByChainId(DEFAULT_CHAINID,_element,_batchHeader,_proof)"], "info": ["StateCommitmentChain", "verifyStateCommitment", "_element", "_batchHeader", "_proof"], "vars": {"DEFAULT_CHAINID": "uint256", "_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "_element": "bytes32", "_proof": "Lib_OVMCodec.ChainInclusionProof"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["timestamp--variables"], "modifier": [], "return_expressions": ["(timestamp+FRAUD_PROOF_WINDOW)>block.timestamp"], "info": ["StateCommitmentChain", "insideFraudProofWindow", "_batchHeader"], "vars": {"FRAUD_PROOF_WINDOW": "uint256", "_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "address": "address", "block.timestamp": "uint256", "timestamp": "uint256", "uint256": "uint256"}, "loop_info": [], "related_expression": ["(timestamp)=abi.decode(_batchHeader.extraData,(uint256,address))", "timestamp!=0"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["lastSequencerTimestamp--variables", "totalElements--variables"], "modifier": [], "return_expressions": ["(totalElements,lastSequencerTimestamp)"], "info": ["StateCommitmentChain", "_getBatchExtraData"], "vars": {"extraData": "bytes27", "lastSequencerTimestamp": "uint40", "totalElements": "uint40"}, "loop_info": [], "related_expression": ["extraData=batches().getGlobalMetadata()", "extraData=extraData>>40", "totalElements=extraData&0x000000000000000000000000000000000000000000000000000000FFFFFFFFFF", "lastSequencerTimestamp=extraData&0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000>>40"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["extraData--variables"], "modifier": [], "return_expressions": ["extraData"], "info": ["StateCommitmentChain", "_makeBatchExtraData", "_totalElements", "_lastSequencerTimestamp"], "vars": {"_lastSequencerTimestamp": "uint40", "_totalElements": "uint40", "extraData": "bytes27"}, "loop_info": [], "related_expression": ["extraData=_totalElements", "extraData=extraData|_lastSequencerTimestamp<<40", "extraData=extraData<<40"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "public", "return_vars": ["totalElements--variables"], "modifier": [], "return_expressions": ["uint256(totalElements)"], "info": ["StateCommitmentChain", "getTotalElementsByChainId", "_chainId"], "vars": {"_chainId": "uint256", "totalElements": "uint40"}, "loop_info": [], "related_expression": ["(totalElements)=_getBatchExtraDataByChainId(_chainId)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "public", "return_vars": ["_chainId--variables"], "modifier": [], "return_expressions": ["batches().lengthByChainId(_chainId)"], "info": ["StateCommitmentChain", "getTotalBatchesByChainId", "_chainId"], "vars": {"_chainId": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["lastSequencerTimestamp--variables"], "modifier": [], "return_expressions": ["uint256(lastSequencerTimestamp)"], "info": ["StateCommitmentChain", "getLastSequencerTimestampByChainId", "_chainId"], "vars": {"_chainId": "uint256", "lastSequencerTimestamp": "uint40"}, "loop_info": [], "related_expression": ["(lastSequencerTimestamp)=_getBatchExtraDataByChainId(_chainId)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["true"], "info": ["StateCommitmentChain", "verifyStateCommitmentByChainId", "_chainId", "_element", "_batchHeader", "_proof"], "vars": {"_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "_chainId": "uint256", "_element": "bytes32", "_proof": "Lib_OVMCodec.ChainInclusionProof"}, "loop_info": [], "related_expression": ["_isValidBatchHeaderByChainId(_chainId,_batchHeader)", "Lib_MerkleTree.verify(_batchHeader.batchRoot,_element,_proof.index,_proof.siblings,_batchHeader.batchSize)"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "public", "return_vars": ["timestamp--variables"], "modifier": [], "return_expressions": ["timestamp+FRAUD_PROOF_WINDOW>block.timestamp"], "info": ["StateCommitmentChain", "insideFraudProofWindowByChainId", "_chainId", "_batchHeader"], "vars": {"FRAUD_PROOF_WINDOW": "uint256", "_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "address": "address", "block.timestamp": "uint256", "timestamp": "uint256", "uint256": "uint256"}, "loop_info": [], "related_expression": ["(timestamp)=abi.decode(_batchHeader.extraData,(uint256,address))", "timestamp!=0"], "related_expression_type": ["AssignmentOperation_=", "Condition"]}, {"visibility": "internal", "return_vars": ["lastSequencerTimestamp--variables", "totalElements--variables"], "modifier": [], "return_expressions": ["(totalElements,lastSequencerTimestamp)"], "info": ["StateCommitmentChain", "_getBatchExtraDataByChainId", "_chainId"], "vars": {"_chainId": "uint256", "extraData": "bytes27", "lastSequencerTimestamp": "uint40", "totalElements": "uint40"}, "loop_info": [], "related_expression": ["extraData=batches().getGlobalMetadataByChainId(_chainId)", "extraData=extraData>>40", "totalElements=extraData&0x000000000000000000000000000000000000000000000000000000FFFFFFFFFF", "lastSequencerTimestamp=extraData&0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000>>40"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["extraData--variables"], "modifier": [], "return_expressions": ["extraData"], "info": ["StateCommitmentChain", "_makeBatchExtraDataByChainId", "_chainId", "_totalElements", "_lastSequencerTimestamp"], "vars": {"_lastSequencerTimestamp": "uint40", "_totalElements": "uint40", "extraData": "bytes27"}, "loop_info": [], "related_expression": ["extraData=_totalElements", "extraData=extraData|_lastSequencerTimestamp<<40", "extraData=extraData<<40"], "related_expression_type": ["AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["_chainId--variables", "_batchHeader--variables"], "modifier": [], "return_expressions": ["Lib_OVMCodec.hashBatchHeader(_batchHeader)==batches().getByChainId(_chainId,_batchHeader.batchIndex)"], "info": ["StateCommitmentChain", "_isValidBatchHeaderByChainId", "_chainId", "_batchHeader"], "vars": {"_batchHeader": "Lib_OVMCodec.ChainBatchHeader", "_chainId": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["0"], "info": ["StateCommitmentChain", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [], "related_expression": ["_i==0"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["StateCommitmentChain", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 4, 7, 7], "related_expression": ["not(_i==0)", "j=_i", "j!=0", "len++", "j/=10", "bstr=newbytes(len)", "k=len", "not(_i!=0)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "Expression", "AssignmentOperation_/=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["StateCommitmentChain", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 2, 5, 10], "related_expression": ["not(_i==0)", "j=_i", "not(j!=0)", "bstr=newbytes(len)", "k=len", "bstr[k]=b1", "_i/=10", "_i!=0", "k=k-1", "temp=(48+uint8(_i-_i/10*10))", "b1=bytes1(temp)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_/=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["StateCommitmentChain", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 2, 5, 5], "related_expression": ["not(_i==0)", "j=_i", "not(j!=0)", "bstr=newbytes(len)", "k=len", "not(_i!=0)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "public", "return_vars": ["_name--variables"], "modifier": [], "return_expressions": ["libAddressManager.getAddress(_name)"], "info": ["MVM_CanonicalTransaction", "resolve", "_name"], "vars": {"_name": "string", "libAddressManager": "Lib_AddressManager"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["stakeBaseCost"], "info": ["MVM_CanonicalTransaction", "getStakeBaseCost"], "vars": {"stakeBaseCost": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["stakeUnitCost"], "info": ["MVM_CanonicalTransaction", "getStakeUnitCost"], "vars": {"stakeUnitCost": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_batchIndex--variables", "_chainId--variables"], "modifier": [], "return_expressions": ["stakeBaseCost+queueBatchElement[_chainId][_batchIndex].txBatchSize*stakeUnitCost"], "info": ["MVM_CanonicalTransaction", "getStakeCostByBatch", "_chainId", "_batchIndex"], "vars": {"_batchIndex": "uint256", "_chainId": "uint256", "queueBatchElement": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.BatchElement))", "stakeBaseCost": "uint256", "stakeUnitCost": "uint256"}, "loop_info": [], "related_expression": ["stakeBaseCost>0", "queueBatchElement[_chainId][_batchIndex].txBatchTime>0"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["txDataSliceSize"], "info": ["MVM_CanonicalTransaction", "getTxDataSliceSize"], "vars": {"txDataSliceSize": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["txDataSliceCount"], "info": ["MVM_CanonicalTransaction", "getTxDataSliceCount"], "vars": {"txDataSliceCount": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["txBatchSize"], "info": ["MVM_CanonicalTransaction", "getTxBatchSize"], "vars": {"txBatchSize": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["stakeSeqSeconds"], "info": ["MVM_CanonicalTransaction", "getStakeSeqSeconds"], "vars": {"stakeSeqSeconds": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": ["_verifier--variables"], "modifier": [], "return_expressions": ["!useWhiteList||whitelist[_verifier]"], "info": ["MVM_CanonicalTransaction", "isWhiteListed", "_verifier"], "vars": {"_verifier": "address", "useWhiteList": "bool", "whitelist": "mapping(address => bool)"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "external", "return_vars": ["_blockNumber--variables", "_chainId--variables"], "modifier": [], "return_expressions": ["(queueTxData[_chainId][_blockNumber].txData,queueTxData[_chainId][_blockNumber].verified)"], "info": ["MVM_CanonicalTransaction", "getBatchTxData", "_chainId", "_batchIndex", "_blockNumber"], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "queueTxData": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataSlice))"}, "loop_info": [], "related_expression": ["queueTxData[_chainId][_blockNumber].timestamp!=0", "queueTxData[_chainId][_blockNumber].batchIndex==_batchIndex"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "external", "return_vars": ["_blockNumber--variables", "_chainId--variables", "_data--variables"], "modifier": [], "return_expressions": ["(keccak256(bytes)(abi.encodePacked(_blockNumber,_data)),queueTxData[_chainId][_blockNumber].verified)"], "info": ["MVM_CanonicalTransaction", "checkBatchTxHash", "_chainId", "_batchIndex", "_blockNumber", "_data"], "vars": {"_batchIndex": "uint256", "_blockNumber": "uint256", "_chainId": "uint256", "_data": "bytes", "queueTxData": "mapping(uint256 => mapping(uint256 => iMVM_CanonicalTransaction.TxDataSlice))"}, "loop_info": [], "related_expression": ["queueTxData[_chainId][_blockNumber].timestamp!=0", "queueTxData[_chainId][_blockNumber].batchIndex==_batchIndex"], "related_expression_type": ["Condition", "Condition"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["0"], "info": ["MVM_CanonicalTransaction", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [], "related_expression": ["_i==0"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["MVM_CanonicalTransaction", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 4, 7, 7], "related_expression": ["not(_i==0)", "j=_i", "j!=0", "len++", "j/=10", "bstr=newbytes(len)", "k=len", "not(_i!=0)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "Expression", "AssignmentOperation_/=", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["MVM_CanonicalTransaction", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 2, 5, 10], "related_expression": ["not(_i==0)", "j=_i", "not(j!=0)", "bstr=newbytes(len)", "k=len", "_i/=10", "_i!=0", "k=k-1", "temp=(48+uint8(_i-_i/10*10))", "b1=bytes1(temp)", "bstr[k]=b1"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_/=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["bstr--variables"], "modifier": [], "return_expressions": ["string(bstr)"], "info": ["MVM_CanonicalTransaction", "uint2str", "_i"], "vars": {"_i": "uint256", "b1": "bytes1", "bstr": "bytes", "j": "uint256", "k": "uint256", "len": "uint256", "temp": "uint8"}, "loop_info": [2, 2, 5, 5], "related_expression": ["not(_i==0)", "j=_i", "not(j!=0)", "bstr=newbytes(len)", "k=len", "not(_i!=0)"], "related_expression_type": ["Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_=", "Condition"], "isloop": true}]