[{"visibility": "internal", "return_vars": ["totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["msg.value-totalGoodwillPortion"], "info": ["Curve_ZapIn_General_V4", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["token==address(0)", "msg.value>0", "totalGoodwillPortion=_subtractGoodwill(ETHAddress,msg.value,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["amount--variables", "totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["amount-totalGoodwillPortion"], "info": ["Curve_ZapIn_General_V4", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["not(token==address(0))", "amount>0", "msg.value==0", "shouldSellEntireBalance", "Address.isContract(msg.sender)", "amount=IERC20(token).allowance(msg.sender,address(this))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "totalGoodwillPortion=_subtractGoodwill(token,amount,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["amount--variables", "totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["amount-totalGoodwillPortion"], "info": ["Curve_ZapIn_General_V4", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["not(token==address(0))", "amount>0", "msg.value==0", "not(shouldSellEntireBalance)", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "totalGoodwillPortion=_subtractGoodwill(token,amount,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Curve_ZapIn_General_V4", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Curve_ZapIn_General_V4", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Curve_ZapIn_General_V4", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["i--variables", "tokensBought--variables"], "modifier": [], "return_expressions": ["(tokensBought,i)"], "info": ["Curve_ZapIn_General_V4", "_enterMetaPool", "swapAddress", "toTokenAddress", "swapTokens"], "vars": {"curveReg": "ICurveRegistry", "i": "uint8", "index": "uint8", "intermediateSwapAddress": "address", "poolTokens": "address[4]", "swapAddress": "address", "swapTokens": "uint256", "toTokenAddress": "address", "tokensBought": "uint256"}, "loop_info": [1], "related_expression": ["i=0", "i++", "i<4", "intermediateSwapAddress=curveReg.getSwapAddress(poolTokens[i])", "intermediateSwapAddress!=address(0)", "intermediateSwapAddress=curveReg.getSwapAddress(poolTokens[i])", "intermediateSwapAddress!=address(0)", "(None,index)=curveReg.isUnderlyingToken(intermediateSwapAddress,toTokenAddress)", "tokensBought=_enterCurve(intermediateSwapAddress,swapTokens,index)"], "related_expression_type": ["AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["i--variables", "tokensBought--variables"], "modifier": [], "return_expressions": ["(tokensBought,i)"], "info": ["Curve_ZapIn_General_V4", "_enterMetaPool", "swapAddress", "toTokenAddress", "swapTokens"], "vars": {"curveReg": "ICurveRegistry", "i": "uint8", "index": "uint8", "intermediateSwapAddress": "address", "poolTokens": "address[4]", "swapAddress": "address", "swapTokens": "uint256", "toTokenAddress": "address", "tokensBought": "uint256"}, "loop_info": [1], "related_expression": ["i=0", "i<4", "intermediateSwapAddress=curveReg.getSwapAddress(poolTokens[i])", "i++", "i<4", "intermediateSwapAddress=curveReg.getSwapAddress(poolTokens[i])", "intermediateSwapAddress!=address(0)", "(None,index)=curveReg.isUnderlyingToken(intermediateSwapAddress,toTokenAddress)", "tokensBought=_enterCurve(intermediateSwapAddress,swapTokens,index)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Expression", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["i--variables", "tokensBought--variables"], "modifier": [], "return_expressions": ["(tokensBought,i)"], "info": ["Curve_ZapIn_General_V4", "_enterMetaPool", "swapAddress", "toTokenAddress", "swapTokens"], "vars": {"curveReg": "ICurveRegistry", "i": "uint8", "index": "uint8", "intermediateSwapAddress": "address", "poolTokens": "address[4]", "swapAddress": "address", "swapTokens": "uint256", "toTokenAddress": "address", "tokensBought": "uint256"}, "loop_info": [1], "related_expression": ["i=0", "i<4", "intermediateSwapAddress=curveReg.getSwapAddress(poolTokens[i])", "intermediateSwapAddress!=address(0)", "(None,index)=curveReg.isUnderlyingToken(intermediateSwapAddress,toTokenAddress)", "tokensBought=_enterCurve(intermediateSwapAddress,swapTokens,index)"], "related_expression_type": ["AssignmentOperation_=", "Condition", "AssignmentOperation_=", "Condition", "AssignmentOperation_=", "AssignmentOperation_="], "isloop": true}, {"visibility": "internal", "return_vars": ["amount--variables"], "modifier": [], "return_expressions": ["amount"], "info": ["Curve_ZapIn_General_V4", "_fillQuote", "fromTokenAddress", "toTokenAddress", "amount", "swapTarget", "swapData"], "vars": {"ETHAddress": "address", "amount": "uint256", "amountBought": "uint256", "approvedTargets": "mapping(address => bool)", "fromTokenAddress": "address", "initialBalance": "uint256", "success": "bool", "swapData": "bytes", "swapTarget": "address", "toTokenAddress": "address", "valueToSend": "uint256", "wethTokenAddress": "address"}, "loop_info": [], "related_expression": ["fromTokenAddress==toTokenAddress"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": ["amount--variables"], "modifier": [], "return_expressions": ["amount"], "info": ["Curve_ZapIn_General_V4", "_fillQuote", "fromTokenAddress", "toTokenAddress", "amount", "swapTarget", "swapData"], "vars": {"ETHAddress": "address", "amount": "uint256", "amountBought": "uint256", "approvedTargets": "mapping(address => bool)", "fromTokenAddress": "address", "initialBalance": "uint256", "success": "bool", "swapData": "bytes", "swapTarget": "address", "toTokenAddress": "address", "valueToSend": "uint256", "wethTokenAddress": "address"}, "loop_info": [], "related_expression": ["not(fromTokenAddress==toTokenAddress)", "swapTarget==wethTokenAddress", "IWETH(wethTokenAddress).deposit{value:amount}()"], "related_expression_type": ["Condition", "Condition", "CallExpression"]}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["ZapBaseV2", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["ZapBaseV2", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["ZapBaseV2", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["ZapInBaseV3", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["ZapInBaseV3", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["ZapInBaseV3", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["msg.value-totalGoodwillPortion"], "info": ["ZapInBaseV3", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["token==address(0)", "msg.value>0", "totalGoodwillPortion=_subtractGoodwill(ETHAddress,msg.value,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["amount--variables", "totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["amount-totalGoodwillPortion"], "info": ["ZapInBaseV3", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["not(token==address(0))", "amount>0", "msg.value==0", "shouldSellEntireBalance", "Address.isContract(msg.sender)", "amount=IERC20(token).allowance(msg.sender,address(this))", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "totalGoodwillPortion=_subtractGoodwill(token,amount,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "Condition", "AssignmentOperation_=", "CallExpression", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["amount--variables", "totalGoodwillPortion--variables"], "modifier": [], "return_expressions": ["amount-totalGoodwillPortion"], "info": ["ZapInBaseV3", "_pullTokens", "token", "amount", "affiliate", "enableGoodwill", "shouldSellEntireBalance"], "vars": {"ETHAddress": "address", "affiliate": "address", "amount": "uint256", "enableGoodwill": "bool", "msg.sender": "address", "msg.value": "uint256", "shouldSellEntireBalance": "bool", "this": "address", "token": "address", "totalGoodwillPortion": "uint256"}, "loop_info": [], "related_expression": ["not(token==address(0))", "amount>0", "msg.value==0", "not(shouldSellEntireBalance)", "IERC20(token).safeTransferFrom(msg.sender,address(this),amount)", "totalGoodwillPortion=_subtractGoodwill(token,amount,affiliate,enableGoodwill)"], "related_expression_type": ["Condition", "Condition", "Condition", "Condition", "CallExpression", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Ownable", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Ownable", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "public", "return_vars": [], "modifier": [], "return_expressions": ["_owner"], "info": ["Ownable", "owner"], "vars": {"_owner": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["size--variables"], "modifier": [], "return_expressions": ["size>0"], "info": ["Address", "isContract", "account"], "vars": {"account": "address", "size": "uint256"}, "loop_info": [], "related_expression": ["size=extcodesize(uint256)(account)"], "related_expression_type": ["AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["target--variables", "data--variables"], "modifier": [], "return_expressions": ["functionCall(target,data,Address:low-levelcallfailed)"], "info": ["Address", "functionCall", "target", "data"], "vars": {"data": "bytes", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["data--variables", "target--variables", "errorMessage--variables"], "modifier": [], "return_expressions": ["functionCallWithValue(target,data,0,errorMessage)"], "info": ["Address", "functionCall", "target", "data", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["target--variables", "data--variables", "value--variables"], "modifier": [], "return_expressions": ["functionCallWithValue(target,data,value,Address:low-levelcallwithvaluefailed)"], "info": ["Address", "functionCallWithValue", "target", "data", "value"], "vars": {"data": "bytes", "target": "address", "value": "uint256"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["errorMessage--variables", "success--variables", "returndata--variables"], "modifier": [], "return_expressions": ["_verifyCallResult(success,returndata,errorMessage)"], "info": ["Address", "functionCallWithValue", "target", "data", "value", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "returndata": "bytes", "success": "bool", "target": "address", "this": "address", "value": "uint256"}, "loop_info": [], "related_expression": ["address(this).balance>=value", "isContract(target)", "(success,returndata)=target.call{value:value}(data)"], "related_expression_type": ["Condition", "Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["data--variables", "target--variables"], "modifier": [], "return_expressions": ["functionStaticCall(target,data,Address:low-levelstaticcallfailed)"], "info": ["Address", "functionStaticCall", "target", "data"], "vars": {"data": "bytes", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["errorMessage--variables", "success--variables", "returndata--variables"], "modifier": [], "return_expressions": ["_verifyCallResult(success,returndata,errorMessage)"], "info": ["Address", "functionStaticCall", "target", "data", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "returndata": "bytes", "success": "bool", "target": "address"}, "loop_info": [], "related_expression": ["isContract(target)", "(success,returndata)=target.staticcall(data)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "internal", "return_vars": ["data--variables", "target--variables"], "modifier": [], "return_expressions": ["functionDelegateCall(target,data,Address:low-leveldelegatecallfailed)"], "info": ["Address", "functionDelegateCall", "target", "data"], "vars": {"data": "bytes", "target": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": ["returndata--variables", "errorMessage--variables", "success--variables"], "modifier": [], "return_expressions": ["_verifyCallResult(success,returndata,errorMessage)"], "info": ["Address", "functionDelegateCall", "target", "data", "errorMessage"], "vars": {"data": "bytes", "errorMessage": "string", "returndata": "bytes", "success": "bool", "target": "address"}, "loop_info": [], "related_expression": ["isContract(target)", "(success,returndata)=target.delegatecall(data)"], "related_expression_type": ["Condition", "AssignmentOperation_="]}, {"visibility": "private", "return_vars": ["returndata--variables"], "modifier": [], "return_expressions": ["returndata"], "info": ["Address", "_verifyCallResult", "success", "returndata", "errorMessage"], "vars": {"errorMessage": "string", "returndata": "bytes", "returndata_size__verifyCallResult_asm_0": "uint256", "success": "bool"}, "loop_info": [], "related_expression": ["success"], "related_expression_type": ["Condition"]}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.sender"], "info": ["Context", "_msgSender"], "vars": {"msg.sender": "address"}, "loop_info": [], "related_expression": [], "related_expression_type": []}, {"visibility": "internal", "return_vars": [], "modifier": [], "return_expressions": ["msg.data"], "info": ["Context", "_msgData"], "vars": {"msg.data": "bytes"}, "loop_info": [], "related_expression": [], "related_expression_type": []}]